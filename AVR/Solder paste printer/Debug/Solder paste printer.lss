
Solder paste printer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  000002dc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d82  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000025d5  00000000  00000000  0000319e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000570  00000000  00000000  00005773  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00005ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000013b2  00000000  00000000  00005dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001eb  00000000  00000000  0000715e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00007349  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  90:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  94:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_37>
  98:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  9c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
  ac:	18 e2       	ldi	r17, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	ec ed       	ldi	r30, 0xDC	; 220
  b4:	f2 e0       	ldi	r31, 0x02	; 2
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>
  c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  c6:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <USART_INIT>:
#include <avr/io.h>

// Temporary, counts steps to move
int move = 5;

void USART_INIT(uint8_t portnum, uint32_t baudrate){
  ce:	cf 93       	push	r28
  d0:	c8 2f       	mov	r28, r24
  d2:	9a 01       	movw	r18, r20
  d4:	ab 01       	movw	r20, r22
	
	//Division needed to get desired baudrate
	uint16_t baudDiv = (4 * fCLK_PER / baudrate);
  d6:	65 e5       	ldi	r22, 0x55	; 85
  d8:	73 e7       	ldi	r23, 0x73	; 115
  da:	8b ec       	ldi	r24, 0xCB	; 203
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 4a 01 	call	0x294	; 0x294 <__udivmodsi4>
	uint8_t RB = USART_RXEN_bm|USART_TXEN_bm;
	
	//Set no parity, 8 data-bits
	uint8_t RC = (0x0 << 4)|(0x3);
	
	switch (portnum)
  e2:	c1 30       	cpi	r28, 0x01	; 1
  e4:	a1 f0       	breq	.+40     	; 0x10e <USART_INIT+0x40>
  e6:	28 f0       	brcs	.+10     	; 0xf2 <USART_INIT+0x24>
  e8:	c2 30       	cpi	r28, 0x02	; 2
  ea:	f9 f0       	breq	.+62     	; 0x12a <USART_INIT+0x5c>
  ec:	c3 30       	cpi	r28, 0x03	; 3
  ee:	59 f1       	breq	.+86     	; 0x146 <USART_INIT+0x78>
  f0:	37 c0       	rjmp	.+110    	; 0x160 <USART_INIT+0x92>
	{
	case 0:
		USART0.BAUD = baudDiv;
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f8 e0       	ldi	r31, 0x08	; 8
  f6:	20 87       	std	Z+8, r18	; 0x08
  f8:	31 87       	std	Z+9, r19	; 0x09
		USART0.CTRLA = RA;
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	85 83       	std	Z+5, r24	; 0x05
		USART0.CTRLC = RC;
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	87 83       	std	Z+7, r24	; 0x07
		PORTA.DIRSET = 1 << 0;		//PA0 is output
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
		USART0.CTRLB = RB;
 108:	80 ec       	ldi	r24, 0xC0	; 192
 10a:	86 83       	std	Z+6, r24	; 0x06
		break;
 10c:	29 c0       	rjmp	.+82     	; 0x160 <USART_INIT+0x92>
	case 1:
		USART1.BAUD = baudDiv;
 10e:	e0 e2       	ldi	r30, 0x20	; 32
 110:	f8 e0       	ldi	r31, 0x08	; 8
 112:	20 87       	std	Z+8, r18	; 0x08
 114:	31 87       	std	Z+9, r19	; 0x09
		USART1.CTRLA = RA;
 116:	80 e8       	ldi	r24, 0x80	; 128
 118:	85 83       	std	Z+5, r24	; 0x05
		USART1.CTRLC = RC;
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	87 83       	std	Z+7, r24	; 0x07
		PORTC.DIRSET = 1 << 0;		//PC0 is output
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x700441>
		USART1.CTRLB = RB;
 124:	80 ec       	ldi	r24, 0xC0	; 192
 126:	86 83       	std	Z+6, r24	; 0x06
		break;
 128:	1b c0       	rjmp	.+54     	; 0x160 <USART_INIT+0x92>
	case 2:
		USART2.BAUD = baudDiv;
 12a:	e0 e4       	ldi	r30, 0x40	; 64
 12c:	f8 e0       	ldi	r31, 0x08	; 8
 12e:	20 87       	std	Z+8, r18	; 0x08
 130:	31 87       	std	Z+9, r19	; 0x09
		USART2.CTRLA = RA;
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	85 83       	std	Z+5, r24	; 0x05
		USART2.CTRLC = RC;
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	87 83       	std	Z+7, r24	; 0x07
		PORTF.DIRSET = 1 << 0;		//PF0 is output
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7004a1>
		USART2.CTRLB = RB;
 140:	80 ec       	ldi	r24, 0xC0	; 192
 142:	86 83       	std	Z+6, r24	; 0x06
		break;
 144:	0d c0       	rjmp	.+26     	; 0x160 <USART_INIT+0x92>
	case 3:
		USART3.BAUD = baudDiv;
 146:	e0 e6       	ldi	r30, 0x60	; 96
 148:	f8 e0       	ldi	r31, 0x08	; 8
 14a:	20 87       	std	Z+8, r18	; 0x08
 14c:	31 87       	std	Z+9, r19	; 0x09
		USART3.CTRLA = RA;
 14e:	80 e8       	ldi	r24, 0x80	; 128
 150:	85 83       	std	Z+5, r24	; 0x05
		USART3.CTRLC = RC;
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	87 83       	std	Z+7, r24	; 0x07
		PORTB.DIRSET = 1 << 0;		//PB0 is output
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
		USART3.CTRLB = RB;
 15c:	80 ec       	ldi	r24, 0xC0	; 192
 15e:	86 83       	std	Z+6, r24	; 0x06
		break;
	}
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <USB_RX>:

void USB_RX(){
	char hasGet = USART3.RXDATAL;
 164:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
	if (hasGet == 'b')
 168:	82 36       	cpi	r24, 0x62	; 98
 16a:	81 f4       	brne	.+32     	; 0x18c <USB_RX+0x28>
	{
		move += 4;
 16c:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__data_start>
 170:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__data_start+0x1>
 174:	2c 5f       	subi	r18, 0xFC	; 252
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	20 93 00 28 	sts	0x2800, r18	; 0x802800 <__data_start>
 17c:	30 93 01 28 	sts	0x2801, r19	; 0x802801 <__data_start+0x1>
		PORTF.OUT |= 1 << 5;
 180:	e0 ea       	ldi	r30, 0xA0	; 160
 182:	f4 e0       	ldi	r31, 0x04	; 4
 184:	94 81       	ldd	r25, Z+4	; 0x04
 186:	90 62       	ori	r25, 0x20	; 32
 188:	94 83       	std	Z+4, r25	; 0x04
 18a:	11 c0       	rjmp	.+34     	; 0x1ae <USB_RX+0x4a>
	} else if(hasGet == 'a'){
 18c:	81 36       	cpi	r24, 0x61	; 97
 18e:	79 f4       	brne	.+30     	; 0x1ae <USB_RX+0x4a>
		move -= 4;
 190:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__data_start>
 194:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__data_start+0x1>
 198:	24 50       	subi	r18, 0x04	; 4
 19a:	31 09       	sbc	r19, r1
 19c:	20 93 00 28 	sts	0x2800, r18	; 0x802800 <__data_start>
 1a0:	30 93 01 28 	sts	0x2801, r19	; 0x802801 <__data_start+0x1>
		PORTF.OUT &= ~(1 << 5);
 1a4:	e0 ea       	ldi	r30, 0xA0	; 160
 1a6:	f4 e0       	ldi	r31, 0x04	; 4
 1a8:	94 81       	ldd	r25, Z+4	; 0x04
 1aa:	9f 7d       	andi	r25, 0xDF	; 223
 1ac:	94 83       	std	Z+4, r25	; 0x04
	}
	USART3.TXDATAL = hasGet;
 1ae:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x700862>
 1b2:	08 95       	ret

000001b4 <main>:
#define MDir 2		//PC2


int main(void)
{
	USART_INIT(3, 19200);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	5b e4       	ldi	r21, 0x4B	; 75
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 67 00 	call	0xce	; 0xce <USART_INIT>
	//Set clk_per prescaler not working?
//	CLKCTRL.MCLKCTRLB = (PDIV << 1)|(1 << 0);
	PORTF.DIRSET = 1 << 5;	//LED
 1c2:	80 e2       	ldi	r24, 0x20	; 32
 1c4:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7004a1>
	PORTC.DIRSET = 1 << MDir;
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x700441>
	PORTD.DIRSET = 1 << MStep;
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x700461>
	
	sei();
 1d4:	78 94       	sei
				move--;
			} else{
				PORTC.OUT &= ~(1 << MDir);
				move++;
			}
			PORTD.OUT |= 1 << MStep;
 1d6:	e0 e6       	ldi	r30, 0x60	; 96
 1d8:	f4 e0       	ldi	r31, 0x04	; 4
		if(move != 0){
			if(move > 0){
				PORTC.OUT |= 1 << MDir;
				move--;
			} else{
				PORTC.OUT &= ~(1 << MDir);
 1da:	a0 e4       	ldi	r26, 0x40	; 64
 1dc:	b4 e0       	ldi	r27, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2a e6       	ldi	r18, 0x6A	; 106
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x30>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x3a>
	sei();
    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(100);			// Actually not 100ms, but ~600ms. Seems like it uses fCLK_PER. 
		if(move != 0){
 1ee:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
 1f2:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__data_start+0x1>
 1f6:	00 97       	sbiw	r24, 0x00	; 0
 1f8:	e9 f0       	breq	.+58     	; 0x234 <main+0x80>
			if(move > 0){
 1fa:	6c f0       	brlt	.+26     	; 0x216 <main+0x62>
				PORTC.OUT |= 1 << MDir;
 1fc:	14 96       	adiw	r26, 0x04	; 4
 1fe:	2c 91       	ld	r18, X
 200:	14 97       	sbiw	r26, 0x04	; 4
 202:	24 60       	ori	r18, 0x04	; 4
 204:	14 96       	adiw	r26, 0x04	; 4
 206:	2c 93       	st	X, r18
 208:	14 97       	sbiw	r26, 0x04	; 4
				move--;
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__data_start>
 210:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__data_start+0x1>
 214:	0c c0       	rjmp	.+24     	; 0x22e <main+0x7a>
			} else{
				PORTC.OUT &= ~(1 << MDir);
 216:	14 96       	adiw	r26, 0x04	; 4
 218:	2c 91       	ld	r18, X
 21a:	14 97       	sbiw	r26, 0x04	; 4
 21c:	2b 7f       	andi	r18, 0xFB	; 251
 21e:	14 96       	adiw	r26, 0x04	; 4
 220:	2c 93       	st	X, r18
 222:	14 97       	sbiw	r26, 0x04	; 4
				move++;
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__data_start>
 22a:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__data_start+0x1>
			}
			PORTD.OUT |= 1 << MStep;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	80 61       	ori	r24, 0x10	; 16
 232:	84 83       	std	Z+4, r24	; 0x04
 234:	2a e6       	ldi	r18, 0x6A	; 106
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <main+0x86>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x90>
		}
		_delay_ms(100);
		PORTD.OUT &= ~(1 << MStep);
 244:	84 81       	ldd	r24, Z+4	; 0x04
 246:	8f 7e       	andi	r24, 0xEF	; 239
 248:	84 83       	std	Z+4, r24	; 0x04
		
    }
 24a:	c9 cf       	rjmp	.-110    	; 0x1de <main+0x2a>

0000024c <__vector_37>:
}

ISR(USART3_RXC_vect){
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	USB_RX();
 26e:	0e 94 b2 00 	call	0x164	; 0x164 <USB_RX>
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__udivmodsi4>:
 294:	a1 e2       	ldi	r26, 0x21	; 33
 296:	1a 2e       	mov	r1, r26
 298:	aa 1b       	sub	r26, r26
 29a:	bb 1b       	sub	r27, r27
 29c:	fd 01       	movw	r30, r26
 29e:	0d c0       	rjmp	.+26     	; 0x2ba <__udivmodsi4_ep>

000002a0 <__udivmodsi4_loop>:
 2a0:	aa 1f       	adc	r26, r26
 2a2:	bb 1f       	adc	r27, r27
 2a4:	ee 1f       	adc	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	a2 17       	cp	r26, r18
 2aa:	b3 07       	cpc	r27, r19
 2ac:	e4 07       	cpc	r30, r20
 2ae:	f5 07       	cpc	r31, r21
 2b0:	20 f0       	brcs	.+8      	; 0x2ba <__udivmodsi4_ep>
 2b2:	a2 1b       	sub	r26, r18
 2b4:	b3 0b       	sbc	r27, r19
 2b6:	e4 0b       	sbc	r30, r20
 2b8:	f5 0b       	sbc	r31, r21

000002ba <__udivmodsi4_ep>:
 2ba:	66 1f       	adc	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	88 1f       	adc	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	1a 94       	dec	r1
 2c4:	69 f7       	brne	.-38     	; 0x2a0 <__udivmodsi4_loop>
 2c6:	60 95       	com	r22
 2c8:	70 95       	com	r23
 2ca:	80 95       	com	r24
 2cc:	90 95       	com	r25
 2ce:	9b 01       	movw	r18, r22
 2d0:	ac 01       	movw	r20, r24
 2d2:	bd 01       	movw	r22, r26
 2d4:	cf 01       	movw	r24, r30
 2d6:	08 95       	ret

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
