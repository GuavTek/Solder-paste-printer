
Solder paste printer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00802800  00802800  0000033e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d85  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025d5  00000000  00000000  0000318d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000570  00000000  00000000  00005762  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00005cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013b2  00000000  00000000  00005d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e7  00000000  00000000  0000714e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00007335  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  80:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  84:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  88:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  8c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  90:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  94:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_37>
  98:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  9c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_clear_bss>:
  ac:	28 e2       	ldi	r18, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a2 30       	cpi	r26, 0x02	; 2
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  c0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <USART_INIT>:
#include "Header.h"

// Temporary, counts steps to move
int move = 0;

void USART_INIT(uint8_t portnum, uint32_t baudrate){
  c8:	cf 93       	push	r28
  ca:	c8 2f       	mov	r28, r24
  cc:	9a 01       	movw	r18, r20
  ce:	ab 01       	movw	r20, r22
	
	//Division needed to get desired baudrate
	uint16_t baudDiv = (4 * fCLK_PER / baudrate);
  d0:	65 e5       	ldi	r22, 0x55	; 85
  d2:	73 e7       	ldi	r23, 0x73	; 115
  d4:	8b ec       	ldi	r24, 0xCB	; 203
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 41 01 	call	0x282	; 0x282 <__udivmodsi4>
	uint8_t RB = USART_RXEN_bm|USART_TXEN_bm;
	
	//Set no parity, 8 data-bits
	uint8_t RC = (0x0 << 4)|(0x3);
	
	switch (portnum)
  dc:	c1 30       	cpi	r28, 0x01	; 1
  de:	a1 f0       	breq	.+40     	; 0x108 <USART_INIT+0x40>
  e0:	28 f0       	brcs	.+10     	; 0xec <USART_INIT+0x24>
  e2:	c2 30       	cpi	r28, 0x02	; 2
  e4:	f9 f0       	breq	.+62     	; 0x124 <USART_INIT+0x5c>
  e6:	c3 30       	cpi	r28, 0x03	; 3
  e8:	59 f1       	breq	.+86     	; 0x140 <USART_INIT+0x78>
  ea:	37 c0       	rjmp	.+110    	; 0x15a <USART_INIT+0x92>
	{
	case 0:
		USART0.BAUD = baudDiv;
  ec:	e0 e0       	ldi	r30, 0x00	; 0
  ee:	f8 e0       	ldi	r31, 0x08	; 8
  f0:	20 87       	std	Z+8, r18	; 0x08
  f2:	31 87       	std	Z+9, r19	; 0x09
		USART0.CTRLA = RA;
  f4:	80 e8       	ldi	r24, 0x80	; 128
  f6:	85 83       	std	Z+5, r24	; 0x05
		USART0.CTRLC = RC;
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	87 83       	std	Z+7, r24	; 0x07
		PORTA.DIRSET = 1 << 0;		//PA0 is output
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
		USART0.CTRLB = RB;
 102:	80 ec       	ldi	r24, 0xC0	; 192
 104:	86 83       	std	Z+6, r24	; 0x06
		break;
 106:	29 c0       	rjmp	.+82     	; 0x15a <USART_INIT+0x92>
	case 1:
		USART1.BAUD = baudDiv;
 108:	e0 e2       	ldi	r30, 0x20	; 32
 10a:	f8 e0       	ldi	r31, 0x08	; 8
 10c:	20 87       	std	Z+8, r18	; 0x08
 10e:	31 87       	std	Z+9, r19	; 0x09
		USART1.CTRLA = RA;
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	85 83       	std	Z+5, r24	; 0x05
		USART1.CTRLC = RC;
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	87 83       	std	Z+7, r24	; 0x07
		PORTC.DIRSET = 1 << 0;		//PC0 is output
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x700441>
		USART1.CTRLB = RB;
 11e:	80 ec       	ldi	r24, 0xC0	; 192
 120:	86 83       	std	Z+6, r24	; 0x06
		break;
 122:	1b c0       	rjmp	.+54     	; 0x15a <USART_INIT+0x92>
	case 2:
		USART2.BAUD = baudDiv;
 124:	e0 e4       	ldi	r30, 0x40	; 64
 126:	f8 e0       	ldi	r31, 0x08	; 8
 128:	20 87       	std	Z+8, r18	; 0x08
 12a:	31 87       	std	Z+9, r19	; 0x09
		USART2.CTRLA = RA;
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	85 83       	std	Z+5, r24	; 0x05
		USART2.CTRLC = RC;
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	87 83       	std	Z+7, r24	; 0x07
		PORTF.DIRSET = 1 << 0;		//PF0 is output
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7004a1>
		USART2.CTRLB = RB;
 13a:	80 ec       	ldi	r24, 0xC0	; 192
 13c:	86 83       	std	Z+6, r24	; 0x06
		break;
 13e:	0d c0       	rjmp	.+26     	; 0x15a <USART_INIT+0x92>
	case 3:
		USART3.BAUD = baudDiv;
 140:	e0 e6       	ldi	r30, 0x60	; 96
 142:	f8 e0       	ldi	r31, 0x08	; 8
 144:	20 87       	std	Z+8, r18	; 0x08
 146:	31 87       	std	Z+9, r19	; 0x09
		USART3.CTRLA = RA;
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	85 83       	std	Z+5, r24	; 0x05
		USART3.CTRLC = RC;
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	87 83       	std	Z+7, r24	; 0x07
		PORTB.DIRSET = 1 << 0;		//PB0 is output
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
		USART3.CTRLB = RB;
 156:	80 ec       	ldi	r24, 0xC0	; 192
 158:	86 83       	std	Z+6, r24	; 0x06
		break;
	}
}
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <USB_RX>:

void USB_RX(){
	char hasGet = USART3.RXDATAL;
 15e:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
	if (hasGet == 'b')
 162:	82 36       	cpi	r24, 0x62	; 98
 164:	81 f4       	brne	.+32     	; 0x186 <USB_RX+0x28>
	{
		move += 100;
 166:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <_edata>
 16a:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <_edata+0x1>
 16e:	2c 59       	subi	r18, 0x9C	; 156
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	20 93 00 28 	sts	0x2800, r18	; 0x802800 <_edata>
 176:	30 93 01 28 	sts	0x2801, r19	; 0x802801 <_edata+0x1>
		PORTF.OUT |= 1 << 5;
 17a:	e0 ea       	ldi	r30, 0xA0	; 160
 17c:	f4 e0       	ldi	r31, 0x04	; 4
 17e:	94 81       	ldd	r25, Z+4	; 0x04
 180:	90 62       	ori	r25, 0x20	; 32
 182:	94 83       	std	Z+4, r25	; 0x04
 184:	11 c0       	rjmp	.+34     	; 0x1a8 <USB_RX+0x4a>
	} else if(hasGet == 'a'){
 186:	81 36       	cpi	r24, 0x61	; 97
 188:	79 f4       	brne	.+30     	; 0x1a8 <USB_RX+0x4a>
		move -= 100;
 18a:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <_edata>
 18e:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <_edata+0x1>
 192:	24 56       	subi	r18, 0x64	; 100
 194:	31 09       	sbc	r19, r1
 196:	20 93 00 28 	sts	0x2800, r18	; 0x802800 <_edata>
 19a:	30 93 01 28 	sts	0x2801, r19	; 0x802801 <_edata+0x1>
		PORTF.OUT &= ~(1 << 5);
 19e:	e0 ea       	ldi	r30, 0xA0	; 160
 1a0:	f4 e0       	ldi	r31, 0x04	; 4
 1a2:	94 81       	ldd	r25, Z+4	; 0x04
 1a4:	9f 7d       	andi	r25, 0xDF	; 223
 1a6:	94 83       	std	Z+4, r25	; 0x04
	}
	USART3.TXDATAL = hasGet;
 1a8:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x700862>
 1ac:	08 95       	ret

000001ae <main>:
#define MDir 2		//PC2


int main(void)
{
	USART_INIT(3, 19200);
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	5b e4       	ldi	r21, 0x4B	; 75
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_INIT>
	//Set clk_per prescaler not working?
//	CLKCTRL.MCLKCTRLB = (PDIV << 1)|(1 << 0);
	PORTF.DIRSET = 1 << 5;	//LED
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7004a1>
	PORTC.DIRSET = 1 << MDir;
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x700441>
	PORTD.DIRSET = 1 << MStep;
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x700461>
	
	sei();
 1ce:	78 94       	sei
				move--;
			} else{
				PORTC.OUT &= ~(1 << MDir);
				move++;
			}
			PORTD.OUT |= 1 << MStep;
 1d0:	e0 e6       	ldi	r30, 0x60	; 96
 1d2:	f4 e0       	ldi	r31, 0x04	; 4
		if(move != 0){
			if(move > 0){
				PORTC.OUT |= 1 << MDir;
				move--;
			} else{
				PORTC.OUT &= ~(1 << MDir);
 1d4:	a0 e4       	ldi	r26, 0x40	; 64
 1d6:	b4 e0       	ldi	r27, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	8a e9       	ldi	r24, 0x9A	; 154
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0x2e>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x34>
	sei();
    /* Replace with your application code */
    while (1) 
    {
		_delay_us(800);
		if(move != 0){
 1e2:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <_edata>
 1e6:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <_edata+0x1>
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	e9 f0       	breq	.+58     	; 0x228 <main+0x7a>
			if(move > 0){
 1ee:	6c f0       	brlt	.+26     	; 0x20a <main+0x5c>
				PORTC.OUT |= 1 << MDir;
 1f0:	14 96       	adiw	r26, 0x04	; 4
 1f2:	2c 91       	ld	r18, X
 1f4:	14 97       	sbiw	r26, 0x04	; 4
 1f6:	24 60       	ori	r18, 0x04	; 4
 1f8:	14 96       	adiw	r26, 0x04	; 4
 1fa:	2c 93       	st	X, r18
 1fc:	14 97       	sbiw	r26, 0x04	; 4
				move--;
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <_edata>
 204:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <_edata+0x1>
 208:	0c c0       	rjmp	.+24     	; 0x222 <main+0x74>
			} else{
				PORTC.OUT &= ~(1 << MDir);
 20a:	14 96       	adiw	r26, 0x04	; 4
 20c:	2c 91       	ld	r18, X
 20e:	14 97       	sbiw	r26, 0x04	; 4
 210:	2b 7f       	andi	r18, 0xFB	; 251
 212:	14 96       	adiw	r26, 0x04	; 4
 214:	2c 93       	st	X, r18
 216:	14 97       	sbiw	r26, 0x04	; 4
				move++;
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <_edata>
 21e:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <_edata+0x1>
			}
			PORTD.OUT |= 1 << MStep;
 222:	84 81       	ldd	r24, Z+4	; 0x04
 224:	80 61       	ori	r24, 0x10	; 16
 226:	84 83       	std	Z+4, r24	; 0x04
 228:	8a e9       	ldi	r24, 0x9A	; 154
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x7e>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x84>
		}
		_delay_us(800);
		PORTD.OUT &= ~(1 << MStep);
 232:	84 81       	ldd	r24, Z+4	; 0x04
 234:	8f 7e       	andi	r24, 0xEF	; 239
 236:	84 83       	std	Z+4, r24	; 0x04
		
    }
 238:	cf cf       	rjmp	.-98     	; 0x1d8 <main+0x2a>

0000023a <__vector_37>:
}

ISR(USART3_RXC_vect){
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
	USB_RX();
 25c:	0e 94 af 00 	call	0x15e	; 0x15e <USB_RX>
}
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__udivmodsi4>:
 282:	a1 e2       	ldi	r26, 0x21	; 33
 284:	1a 2e       	mov	r1, r26
 286:	aa 1b       	sub	r26, r26
 288:	bb 1b       	sub	r27, r27
 28a:	fd 01       	movw	r30, r26
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <__udivmodsi4_ep>

0000028e <__udivmodsi4_loop>:
 28e:	aa 1f       	adc	r26, r26
 290:	bb 1f       	adc	r27, r27
 292:	ee 1f       	adc	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	a2 17       	cp	r26, r18
 298:	b3 07       	cpc	r27, r19
 29a:	e4 07       	cpc	r30, r20
 29c:	f5 07       	cpc	r31, r21
 29e:	20 f0       	brcs	.+8      	; 0x2a8 <__udivmodsi4_ep>
 2a0:	a2 1b       	sub	r26, r18
 2a2:	b3 0b       	sbc	r27, r19
 2a4:	e4 0b       	sbc	r30, r20
 2a6:	f5 0b       	sbc	r31, r21

000002a8 <__udivmodsi4_ep>:
 2a8:	66 1f       	adc	r22, r22
 2aa:	77 1f       	adc	r23, r23
 2ac:	88 1f       	adc	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	1a 94       	dec	r1
 2b2:	69 f7       	brne	.-38     	; 0x28e <__udivmodsi4_loop>
 2b4:	60 95       	com	r22
 2b6:	70 95       	com	r23
 2b8:	80 95       	com	r24
 2ba:	90 95       	com	r25
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
 2c0:	bd 01       	movw	r22, r26
 2c2:	cf 01       	movw	r24, r30
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
