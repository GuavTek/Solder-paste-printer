
Solder paste printer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  0000171c  000017b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000171c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ff  00802802  00802802  000017b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003fbe  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b4e  00000000  00000000  00005932  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000104e  00000000  00000000  00008480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  000094d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001808  00000000  00000000  00009834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b60  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000bb9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 29 01 	jmp	0x252	; 0x252 <__ctors_end>
       4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      10:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      14:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      18:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      20:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      24:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      28:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      2c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      30:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      34:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      38:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      3c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      44:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      48:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      4c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      50:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      54:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      58:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      5c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      60:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      64:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      68:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      6c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      70:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      74:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      78:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      7c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      80:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      84:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      88:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      8c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      90:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      94:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__vector_37>
      98:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      9c:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__vector_39>
      a0:	74 01       	movw	r14, r8
      a2:	78 01       	movw	r14, r16
      a4:	5b 01       	movw	r10, r22
      a6:	69 01       	movw	r12, r18
      a8:	70 01       	movw	r14, r0
      aa:	88 01       	movw	r16, r16
      ac:	62 01       	movw	r12, r4
      ae:	7c 01       	movw	r14, r24
      b0:	ff 01       	movw	r30, r30
      b2:	03 02       	muls	r16, r19
      b4:	b2 03       	fmuls	r19, r18
      b6:	49 02       	muls	r20, r25
      b8:	7b 02       	muls	r23, r27
      ba:	ad 02       	muls	r26, r29
      bc:	b2 03       	fmuls	r19, r18
      be:	df 02       	muls	r29, r31
      c0:	bd 03       	fmulsu	r19, r21
      c2:	bd 03       	fmulsu	r19, r21
      c4:	08 03       	fmul	r16, r16
      c6:	b2 03       	fmuls	r19, r18
      c8:	0e 03       	fmul	r16, r22
      ca:	18 03       	fmul	r17, r16
      cc:	b2 03       	fmuls	r19, r18
      ce:	b2 03       	fmuls	r19, r18
      d0:	b2 03       	fmuls	r19, r18
      d2:	b2 03       	fmuls	r19, r18
      d4:	1c 03       	fmul	r17, r20
      d6:	4e 03       	fmul	r20, r22
      d8:	80 03       	fmuls	r16, r16
      da:	0d 02       	muls	r16, r29
      dc:	11 02       	muls	r17, r17
      de:	16 02       	muls	r17, r22
      e0:	1b 02       	muls	r17, r27
      e2:	20 02       	muls	r18, r16
      e4:	bf 03       	fmulsu	r19, r23
      e6:	bf 03       	fmulsu	r19, r23
      e8:	bf 03       	fmulsu	r19, r23
      ea:	bf 03       	fmulsu	r19, r23
      ec:	bf 03       	fmulsu	r19, r23
      ee:	bf 03       	fmulsu	r19, r23
      f0:	bf 03       	fmulsu	r19, r23
      f2:	bf 03       	fmulsu	r19, r23
      f4:	bf 03       	fmulsu	r19, r23
      f6:	bf 03       	fmulsu	r19, r23
      f8:	bf 03       	fmulsu	r19, r23
      fa:	bf 03       	fmulsu	r19, r23
      fc:	bf 03       	fmulsu	r19, r23
      fe:	bf 03       	fmulsu	r19, r23
     100:	bf 03       	fmulsu	r19, r23
     102:	32 02       	muls	r19, r18
     104:	37 02       	muls	r19, r23
     106:	bf 03       	fmulsu	r19, r23
     108:	bf 03       	fmulsu	r19, r23
     10a:	bf 03       	fmulsu	r19, r23
     10c:	bf 03       	fmulsu	r19, r23
     10e:	bf 03       	fmulsu	r19, r23
     110:	bf 03       	fmulsu	r19, r23
     112:	3b 02       	muls	r19, r27
     114:	bf 03       	fmulsu	r19, r23
     116:	bf 03       	fmulsu	r19, r23
     118:	bf 03       	fmulsu	r19, r23
     11a:	bf 03       	fmulsu	r19, r23
     11c:	bf 03       	fmulsu	r19, r23
     11e:	bf 03       	fmulsu	r19, r23
     120:	bf 03       	fmulsu	r19, r23
     122:	bf 03       	fmulsu	r19, r23
     124:	bf 03       	fmulsu	r19, r23
     126:	bf 03       	fmulsu	r19, r23
     128:	bf 03       	fmulsu	r19, r23
     12a:	bf 03       	fmulsu	r19, r23
     12c:	bf 03       	fmulsu	r19, r23
     12e:	bf 03       	fmulsu	r19, r23
     130:	bf 03       	fmulsu	r19, r23
     132:	bf 03       	fmulsu	r19, r23
     134:	bf 03       	fmulsu	r19, r23
     136:	bf 03       	fmulsu	r19, r23
     138:	bf 03       	fmulsu	r19, r23
     13a:	bf 03       	fmulsu	r19, r23
     13c:	bf 03       	fmulsu	r19, r23
     13e:	bf 03       	fmulsu	r19, r23
     140:	bf 03       	fmulsu	r19, r23
     142:	bf 03       	fmulsu	r19, r23
     144:	bf 03       	fmulsu	r19, r23
     146:	bf 03       	fmulsu	r19, r23
     148:	bf 03       	fmulsu	r19, r23
     14a:	bf 03       	fmulsu	r19, r23
     14c:	bf 03       	fmulsu	r19, r23
     14e:	bf 03       	fmulsu	r19, r23
     150:	bf 03       	fmulsu	r19, r23
     152:	bf 03       	fmulsu	r19, r23
     154:	bf 03       	fmulsu	r19, r23
     156:	bf 03       	fmulsu	r19, r23
     158:	bf 03       	fmulsu	r19, r23
     15a:	bf 03       	fmulsu	r19, r23
     15c:	bf 03       	fmulsu	r19, r23
     15e:	bf 03       	fmulsu	r19, r23
     160:	bf 03       	fmulsu	r19, r23
     162:	bf 03       	fmulsu	r19, r23
     164:	bf 03       	fmulsu	r19, r23
     166:	bf 03       	fmulsu	r19, r23
     168:	bf 03       	fmulsu	r19, r23
     16a:	bf 03       	fmulsu	r19, r23
     16c:	bf 03       	fmulsu	r19, r23
     16e:	bf 03       	fmulsu	r19, r23
     170:	bf 03       	fmulsu	r19, r23
     172:	bf 03       	fmulsu	r19, r23
     174:	bf 03       	fmulsu	r19, r23
     176:	bf 03       	fmulsu	r19, r23
     178:	bf 03       	fmulsu	r19, r23
     17a:	bf 03       	fmulsu	r19, r23
     17c:	bf 03       	fmulsu	r19, r23
     17e:	bf 03       	fmulsu	r19, r23
     180:	bf 03       	fmulsu	r19, r23
     182:	bf 03       	fmulsu	r19, r23
     184:	bf 03       	fmulsu	r19, r23
     186:	bf 03       	fmulsu	r19, r23
     188:	bf 03       	fmulsu	r19, r23
     18a:	bf 03       	fmulsu	r19, r23
     18c:	bf 03       	fmulsu	r19, r23
     18e:	40 02       	muls	r20, r16
     190:	44 02       	muls	r20, r20
     192:	e9 02       	muls	r30, r25
     194:	ee 02       	muls	r30, r30
     196:	f3 02       	muls	r31, r19
     198:	f8 02       	muls	r31, r24
     19a:	f8 02       	muls	r31, r24
     19c:	fd 02       	muls	r31, r29
     19e:	c1 03       	fmuls	r20, r17
     1a0:	c1 03       	fmuls	r20, r17
     1a2:	c1 03       	fmuls	r20, r17
     1a4:	c1 03       	fmuls	r20, r17
     1a6:	c1 03       	fmuls	r20, r17
     1a8:	c1 03       	fmuls	r20, r17
     1aa:	c1 03       	fmuls	r20, r17
     1ac:	c1 03       	fmuls	r20, r17
     1ae:	c1 03       	fmuls	r20, r17
     1b0:	c1 03       	fmuls	r20, r17
     1b2:	c1 03       	fmuls	r20, r17
     1b4:	c1 03       	fmuls	r20, r17
     1b6:	c1 03       	fmuls	r20, r17
     1b8:	c1 03       	fmuls	r20, r17
     1ba:	c1 03       	fmuls	r20, r17
     1bc:	c1 03       	fmuls	r20, r17
     1be:	c1 03       	fmuls	r20, r17
     1c0:	c1 03       	fmuls	r20, r17
     1c2:	c1 03       	fmuls	r20, r17
     1c4:	c1 03       	fmuls	r20, r17
     1c6:	c1 03       	fmuls	r20, r17
     1c8:	c1 03       	fmuls	r20, r17
     1ca:	c1 03       	fmuls	r20, r17
     1cc:	c1 03       	fmuls	r20, r17
     1ce:	01 03       	mulsu	r16, r17
     1d0:	07 63       	ori	r16, 0x37	; 55
     1d2:	42 36       	cpi	r20, 0x62	; 98
     1d4:	b7 9b       	sbis	0x16, 7	; 22
     1d6:	d8 a7       	std	Y+40, r29	; 0x28
     1d8:	1a 39       	cpi	r17, 0x9A	; 154
     1da:	68 56       	subi	r22, 0x68	; 104
     1dc:	18 ae       	std	Y+56, r1	; 0x38
     1de:	ba ab       	std	Y+50, r27	; 0x32
     1e0:	55 8c       	ldd	r5, Z+29	; 0x1d
     1e2:	1d 3c       	cpi	r17, 0xCD	; 205
     1e4:	b7 cc       	rjmp	.-1682   	; 0xfffffb54 <__eeprom_end+0xff7efb54>
     1e6:	57 63       	ori	r21, 0x37	; 55
     1e8:	bd 6d       	ori	r27, 0xDD	; 221
     1ea:	ed fd       	.word	0xfded	; ????
     1ec:	75 3e       	cpi	r23, 0xE5	; 229
     1ee:	f6 17       	cp	r31, r22
     1f0:	72 31       	cpi	r23, 0x12	; 18
     1f2:	bf 00       	.word	0x00bf	; ????
     1f4:	00 00       	nop
     1f6:	80 3f       	cpi	r24, 0xF0	; 240
     1f8:	08 00       	.word	0x0008	; ????
     1fa:	00 00       	nop
     1fc:	be 92       	st	-X, r11
     1fe:	24 49       	sbci	r18, 0x94	; 148
     200:	12 3e       	cpi	r17, 0xE2	; 226
     202:	ab aa       	std	Y+51, r10	; 0x33
     204:	aa 2a       	or	r10, r26
     206:	be cd       	rjmp	.-1156   	; 0xfffffd84 <__eeprom_end+0xff7efd84>
     208:	cc cc       	rjmp	.-1640   	; 0xfffffba2 <__eeprom_end+0xff7efba2>
     20a:	4c 3e       	cpi	r20, 0xEC	; 236
     20c:	00 00       	nop
     20e:	00 80       	ld	r0, Z
     210:	be ab       	std	Y+54, r27	; 0x36
     212:	aa aa       	std	Y+50, r10	; 0x32
     214:	aa 3e       	cpi	r26, 0xEA	; 234
     216:	00 00       	nop
     218:	00 00       	nop
     21a:	bf 00       	.word	0x00bf	; ????
     21c:	00 00       	nop
     21e:	80 3f       	cpi	r24, 0xF0	; 240
     220:	00 00       	nop
     222:	00 00       	nop
     224:	00 08       	sbc	r0, r0
     226:	41 78       	andi	r20, 0x81	; 129
     228:	d3 bb       	out	0x13, r29	; 19
     22a:	43 87       	std	Z+11, r20	; 0x0b
     22c:	d1 13       	cpse	r29, r17
     22e:	3d 19       	sub	r19, r13
     230:	0e 3c       	cpi	r16, 0xCE	; 206
     232:	c3 bd       	out	0x23, r28	; 35
     234:	42 82       	std	Z+2, r4	; 0x02
     236:	ad 2b       	or	r26, r29
     238:	3e 68       	ori	r19, 0x8E	; 142
     23a:	ec 82       	std	Y+4, r14	; 0x04
     23c:	76 be       	out	0x36, r7	; 54
     23e:	d9 8f       	std	Y+25, r29	; 0x19
     240:	e1 a9       	ldd	r30, Z+49	; 0x31
     242:	3e 4c       	sbci	r19, 0xCE	; 206
     244:	80 ef       	ldi	r24, 0xF0	; 240
     246:	ff be       	out	0x3f, r15	; 63
     248:	01 c4       	rjmp	.+2050   	; 0xa4c <USART_INIT+0x58>
     24a:	ff 7f       	andi	r31, 0xFF	; 255
     24c:	3f 00       	.word	0x003f	; ????
     24e:	00 00       	nop
	...

00000252 <__ctors_end>:
     252:	11 24       	eor	r1, r1
     254:	1f be       	out	0x3f, r1	; 63
     256:	cf ef       	ldi	r28, 0xFF	; 255
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	df e3       	ldi	r29, 0x3F	; 63
     25c:	de bf       	out	0x3e, r29	; 62

0000025e <__do_copy_data>:
     25e:	18 e2       	ldi	r17, 0x28	; 40
     260:	a0 e0       	ldi	r26, 0x00	; 0
     262:	b8 e2       	ldi	r27, 0x28	; 40
     264:	ec e1       	ldi	r30, 0x1C	; 28
     266:	f7 e1       	ldi	r31, 0x17	; 23
     268:	02 c0       	rjmp	.+4      	; 0x26e <__do_copy_data+0x10>
     26a:	05 90       	lpm	r0, Z+
     26c:	0d 92       	st	X+, r0
     26e:	a2 30       	cpi	r26, 0x02	; 2
     270:	b1 07       	cpc	r27, r17
     272:	d9 f7       	brne	.-10     	; 0x26a <__do_copy_data+0xc>

00000274 <__do_clear_bss>:
     274:	2a e2       	ldi	r18, 0x2A	; 42
     276:	a2 e0       	ldi	r26, 0x02	; 2
     278:	b8 e2       	ldi	r27, 0x28	; 40
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	a1 30       	cpi	r26, 0x01	; 1
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 19 06 	call	0xc32	; 0xc32 <main>
     288:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <_exit>

0000028c <__bad_interrupt>:
     28c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000290 <ReportStatus>:
 *  Author: mikda
 */ 

#include "Header.h"

void ReportStatus(ReturnCodes code, int num){
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	c8 2f       	mov	r28, r24
     296:	d6 2f       	mov	r29, r22
	if (TX_available() == BUFFER_FULL)
     298:	0e 94 d7 05 	call	0xbae	; 0xbae <TX_available>
     29c:	84 30       	cpi	r24, 0x04	; 4
     29e:	c1 f1       	breq	.+112    	; 0x310 <ReportStatus+0x80>
	{
		//Oof
		return;
	}
	switch (code){
     2a0:	8c 2f       	mov	r24, r28
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	fc 01       	movw	r30, r24
     2a6:	31 97       	sbiw	r30, 0x01	; 1
     2a8:	e8 30       	cpi	r30, 0x08	; 8
     2aa:	f1 05       	cpc	r31, r1
     2ac:	88 f5       	brcc	.+98     	; 0x310 <ReportStatus+0x80>
     2ae:	e0 5b       	subi	r30, 0xB0	; 176
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__tablejump2__>
		case NOT_RECOGNIZED: {
			TX_write('N');
     2b6:	8e e4       	ldi	r24, 0x4E	; 78
     2b8:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
			TX_write(num);	//Should be letter of G-code, is ASCII
     2bc:	8d 2f       	mov	r24, r29
     2be:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
			break;
     2c2:	20 c0       	rjmp	.+64     	; 0x304 <ReportStatus+0x74>
		} 
		case BUFFER_OVERFLOW: {
			TX_write('O');
     2c4:	8f e4       	ldi	r24, 0x4F	; 79
     2c6:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
			TX_write(num);
     2ca:	8d 2f       	mov	r24, r29
     2cc:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
			break;
     2d0:	19 c0       	rjmp	.+50     	; 0x304 <ReportStatus+0x74>
		}
		case BUFFER_FULL: {
			TX_write('F');
     2d2:	86 e4       	ldi	r24, 0x46	; 70
     2d4:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
			TX_write(num);
     2d8:	8d 2f       	mov	r24, r29
     2da:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
			break;
     2de:	12 c0       	rjmp	.+36     	; 0x304 <ReportStatus+0x74>
		} 
		case BUFFER_AVAILABLE: {
			TX_write('A');
     2e0:	81 e4       	ldi	r24, 0x41	; 65
     2e2:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
			break;
     2e6:	0e c0       	rjmp	.+28     	; 0x304 <ReportStatus+0x74>
		} 
		case STOP_DETECTED: {
			TX_write('S');
     2e8:	83 e5       	ldi	r24, 0x53	; 83
     2ea:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
			break;
     2ee:	0a c0       	rjmp	.+20     	; 0x304 <ReportStatus+0x74>
		} 
		case NEW_BLOCK:	{
			if(!VERBOSE_FEEDBACK){
				return;
			}
			TX_write('B');
     2f0:	82 e4       	ldi	r24, 0x42	; 66
     2f2:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
			break;
     2f6:	06 c0       	rjmp	.+12     	; 0x304 <ReportStatus+0x74>
		} 
		case SHORT_WORD: {
			TX_write('H');
     2f8:	88 e4       	ldi	r24, 0x48	; 72
     2fa:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
			TX_write(num);
     2fe:	8d 2f       	mov	r24, r29
     300:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
		}
		default: {
			return;
		}
	}
	TX_write('\n');
     304:	8a e0       	ldi	r24, 0x0A	; 10
     306:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
	TX_write('\r');
     30a:	8d e0       	ldi	r24, 0x0D	; 13
     30c:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
	
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <ParseWord>:
	wordIndex++;

	return NONE;
}

ReturnCodes ParseWord(){
     316:	8f 92       	push	r8
     318:	9f 92       	push	r9
     31a:	af 92       	push	r10
     31c:	bf 92       	push	r11
     31e:	cf 92       	push	r12
     320:	df 92       	push	r13
     322:	ef 92       	push	r14
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	60 97       	sbiw	r28, 0x10	; 16
     334:	cd bf       	out	0x3d, r28	; 61
     336:	de bf       	out	0x3e, r29	; 62
	char letter = currentWord[0];
     338:	00 91 30 29 	lds	r16, 0x2930	; 0x802930 <currentWord>
	uint8_t fraction = 0;
	uint8_t precision = 0;
	static int parameter = 0;
	
	//Return if word is too short
	if (wordIndex < 2)
     33c:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <wordIndex>
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	18 f0       	brcs	.+6      	; 0x34a <ParseWord+0x34>
		}
		return SHORT_WORD;
	}
	
	//Erase the unused part of the word buffer
	for (uint8_t i = wordIndex; i < MAX_WORD_SIZE; i++){
     344:	80 31       	cpi	r24, 0x10	; 16
     346:	58 f0       	brcs	.+22     	; 0x35e <ParseWord+0x48>
     348:	12 c0       	rjmp	.+36     	; 0x36e <ParseWord+0x58>
	static int parameter = 0;
	
	//Return if word is too short
	if (wordIndex < 2)
	{
		if (wordIndex > 0)
     34a:	88 23       	and	r24, r24
     34c:	09 f4       	brne	.+2      	; 0x350 <ParseWord+0x3a>
     34e:	11 c2       	rjmp	.+1058   	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
		{
			ReportStatus(SHORT_WORD, currentWord[0]);
     350:	60 2f       	mov	r22, r16
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	88 e0       	ldi	r24, 0x08	; 8
     356:	0e 94 48 01 	call	0x290	; 0x290 <ReportStatus>
		}
		return SHORT_WORD;
     35a:	88 e0       	ldi	r24, 0x08	; 8
     35c:	13 c2       	rjmp	.+1062   	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
	}
	
	//Erase the unused part of the word buffer
	for (uint8_t i = wordIndex; i < MAX_WORD_SIZE; i++){
		currentWord[i] = 0;
     35e:	e8 2f       	mov	r30, r24
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	e0 5d       	subi	r30, 0xD0	; 208
     364:	f6 4d       	sbci	r31, 0xD6	; 214
     366:	10 82       	st	Z, r1
		}
		return SHORT_WORD;
	}
	
	//Erase the unused part of the word buffer
	for (uint8_t i = wordIndex; i < MAX_WORD_SIZE; i++){
     368:	8f 5f       	subi	r24, 0xFF	; 255
     36a:	80 31       	cpi	r24, 0x10	; 16
     36c:	c1 f7       	brne	.-16     	; 0x35e <ParseWord+0x48>
		currentWord[i] = 0;
	}
	
	
	//Scan the string to see if it is a float
	uint8_t dotPos = ScanWord(currentWord, 1, '.');
     36e:	4e e2       	ldi	r20, 0x2E	; 46
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	80 e3       	ldi	r24, 0x30	; 48
     374:	99 e2       	ldi	r25, 0x29	; 41
     376:	0e 94 9c 06 	call	0xd38	; 0xd38 <ScanWord>
     37a:	18 2f       	mov	r17, r24
	
	//If float, convert fraction separately
	if (dotPos)
     37c:	88 23       	and	r24, r24
     37e:	41 f1       	breq	.+80     	; 0x3d0 <ParseWord+0xba>
	{
		char tempSlice[MAX_WORD_SIZE];
		Slice(currentWord, tempSlice, 1, dotPos - 1);
     380:	2f ef       	ldi	r18, 0xFF	; 255
     382:	28 0f       	add	r18, r24
     384:	41 e0       	ldi	r20, 0x01	; 1
     386:	be 01       	movw	r22, r28
     388:	6f 5f       	subi	r22, 0xFF	; 255
     38a:	7f 4f       	sbci	r23, 0xFF	; 255
     38c:	80 e3       	ldi	r24, 0x30	; 48
     38e:	99 e2       	ldi	r25, 0x29	; 41
     390:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Slice>
		num = atoi(tempSlice);
     394:	ce 01       	movw	r24, r28
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	0e 94 66 0b 	call	0x16cc	; 0x16cc <atoi>
     39c:	7c 01       	movw	r14, r24
		precision = StringLength(currentWord, dotPos + 1);
     39e:	cc 24       	eor	r12, r12
     3a0:	c3 94       	inc	r12
     3a2:	c1 0e       	add	r12, r17
     3a4:	6c 2d       	mov	r22, r12
     3a6:	80 e3       	ldi	r24, 0x30	; 48
     3a8:	99 e2       	ldi	r25, 0x29	; 41
     3aa:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <StringLength>
     3ae:	d8 2e       	mov	r13, r24
		Slice(currentWord, tempSlice, dotPos + 1, dotPos + precision);
     3b0:	21 2f       	mov	r18, r17
     3b2:	28 0f       	add	r18, r24
     3b4:	4c 2d       	mov	r20, r12
     3b6:	be 01       	movw	r22, r28
     3b8:	6f 5f       	subi	r22, 0xFF	; 255
     3ba:	7f 4f       	sbci	r23, 0xFF	; 255
     3bc:	80 e3       	ldi	r24, 0x30	; 48
     3be:	99 e2       	ldi	r25, 0x29	; 41
     3c0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Slice>
		fraction = atoi(tempSlice);
     3c4:	ce 01       	movw	r24, r28
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <atoi>
     3cc:	18 2f       	mov	r17, r24
     3ce:	07 c0       	rjmp	.+14     	; 0x3de <ParseWord+0xc8>
		
	} else {
		num = atoi(currentWord + 1);
     3d0:	81 e3       	ldi	r24, 0x31	; 49
     3d2:	99 e2       	ldi	r25, 0x29	; 41
     3d4:	0e 94 66 0b 	call	0x16cc	; 0x16cc <atoi>
     3d8:	7c 01       	movw	r14, r24

ReturnCodes ParseWord(){
	char letter = currentWord[0];
	int num = 0;
	uint8_t fraction = 0;
	uint8_t precision = 0;
     3da:	d1 2c       	mov	r13, r1
}

ReturnCodes ParseWord(){
	char letter = currentWord[0];
	int num = 0;
	uint8_t fraction = 0;
     3dc:	10 e0       	ldi	r17, 0x00	; 0
	} else {
		num = atoi(currentWord + 1);
	}
	
	//Detect if it is real-time command
	if(letter > 0x7F){
     3de:	00 23       	and	r16, r16
     3e0:	0c f4       	brge	.+2      	; 0x3e4 <ParseWord+0xce>
     3e2:	c9 c1       	rjmp	.+914    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
		
	} else {
		switch (letter)
     3e4:	80 2f       	mov	r24, r16
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	fc 01       	movw	r30, r24
     3ea:	e6 54       	subi	r30, 0x46	; 70
     3ec:	f1 09       	sbc	r31, r1
     3ee:	e5 31       	cpi	r30, 0x15	; 21
     3f0:	f1 05       	cpc	r31, r1
     3f2:	08 f0       	brcs	.+2      	; 0x3f6 <ParseWord+0xe0>
     3f4:	b7 c1       	rjmp	.+878    	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
     3f6:	e8 5a       	subi	r30, 0xA8	; 168
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__tablejump2__>
		{
			//case 'A': case 'B': case 'C':{break;} //Ignore rotation
				
			case 'F': {
				//Feedrate
				currentBlock.moveSpeed = num;
     3fe:	e0 92 28 29 	sts	0x2928, r14	; 0x802928 <currentBlock+0x18>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     402:	80 e0       	ldi	r24, 0x00	; 0
			//case 'A': case 'B': case 'C':{break;} //Ignore rotation
				
			case 'F': {
				//Feedrate
				currentBlock.moveSpeed = num;
				break;
     404:	bf c1       	rjmp	.+894    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
			}
			case 'G':{
				//Prep commands
				switch(num){
     406:	8c e5       	ldi	r24, 0x5C	; 92
     408:	e8 16       	cp	r14, r24
     40a:	f1 04       	cpc	r15, r1
     40c:	08 f0       	brcs	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	b7 c1       	rjmp	.+878    	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
     410:	f7 01       	movw	r30, r14
     412:	e3 59       	subi	r30, 0x93	; 147
     414:	ff 4f       	sbci	r31, 0xFF	; 255
     416:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__tablejump2__>
					case 0: {
						currentBlock.motion = Rapid_position;
     41a:	10 92 26 29 	sts	0x2926, r1	; 0x802926 <currentBlock+0x16>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     41e:	80 e0       	ldi	r24, 0x00	; 0
			case 'G':{
				//Prep commands
				switch(num){
					case 0: {
						currentBlock.motion = Rapid_position;
						break;
     420:	b1 c1       	rjmp	.+866    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
					}
					case 1: {
						currentBlock.motion = Linear_interpolation;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	80 93 26 29 	sts	0x2926, r24	; 0x802926 <currentBlock+0x16>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     428:	80 e0       	ldi	r24, 0x00	; 0
						currentBlock.motion = Rapid_position;
						break;
					}
					case 1: {
						currentBlock.motion = Linear_interpolation;
						break;
     42a:	ac c1       	rjmp	.+856    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
					}
					case 2: {
						currentBlock.motion = Arc_CW;
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	80 93 26 29 	sts	0x2926, r24	; 0x802926 <currentBlock+0x16>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     432:	80 e0       	ldi	r24, 0x00	; 0
						currentBlock.motion = Linear_interpolation;
						break;
					}
					case 2: {
						currentBlock.motion = Arc_CW;
						break;
     434:	a7 c1       	rjmp	.+846    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
					}
					case 3: {
						currentBlock.motion = Arc_CCW;
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	80 93 26 29 	sts	0x2926, r24	; 0x802926 <currentBlock+0x16>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     43c:	80 e0       	ldi	r24, 0x00	; 0
						currentBlock.motion = Arc_CW;
						break;
					}
					case 3: {
						currentBlock.motion = Arc_CCW;
						break;
     43e:	a2 c1       	rjmp	.+836    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
					}
					case 4: {
						currentBlock.motion = Dwell;
     440:	e0 e1       	ldi	r30, 0x10	; 16
     442:	f9 e2       	ldi	r31, 0x29	; 41
     444:	84 e0       	ldi	r24, 0x04	; 4
     446:	86 8b       	std	Z+22, r24	; 0x16
						currentBlock.dwellTime = parameter;
     448:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     44c:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <__data_end+0x1>
     450:	09 2e       	mov	r0, r25
     452:	00 0c       	add	r0, r0
     454:	aa 0b       	sbc	r26, r26
     456:	bb 0b       	sbc	r27, r27
     458:	82 8f       	std	Z+26, r24	; 0x1a
     45a:	93 8f       	std	Z+27, r25	; 0x1b
     45c:	a4 8f       	std	Z+28, r26	; 0x1c
     45e:	b5 8f       	std	Z+29, r27	; 0x1d
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     460:	80 e0       	ldi	r24, 0x00	; 0
						break;
					}
					case 4: {
						currentBlock.motion = Dwell;
						currentBlock.dwellTime = parameter;
						break;
     462:	90 c1       	rjmp	.+800    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
					}
					case 20: {
						currentBlock.coordinateUnit = Inch;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 2f 29 	sts	0x292F, r24	; 0x80292f <currentBlock+0x1f>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     46a:	80 e0       	ldi	r24, 0x00	; 0
						currentBlock.dwellTime = parameter;
						break;
					}
					case 20: {
						currentBlock.coordinateUnit = Inch;
						break;
     46c:	8b c1       	rjmp	.+790    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
					}
					case 21: {
						currentBlock.coordinateMode = millimeter;
     46e:	10 92 2e 29 	sts	0x292E, r1	; 0x80292e <currentBlock+0x1e>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     472:	80 e0       	ldi	r24, 0x00	; 0
						currentBlock.coordinateUnit = Inch;
						break;
					}
					case 21: {
						currentBlock.coordinateMode = millimeter;
						break;
     474:	87 c1       	rjmp	.+782    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
					}
					case 28: {
						currentBlock.motion = Home;
     476:	85 e0       	ldi	r24, 0x05	; 5
     478:	80 93 26 29 	sts	0x2926, r24	; 0x802926 <currentBlock+0x16>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     47c:	80 e0       	ldi	r24, 0x00	; 0
						currentBlock.coordinateMode = millimeter;
						break;
					}
					case 28: {
						currentBlock.motion = Home;
						break;
     47e:	82 c1       	rjmp	.+772    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
					}
					case 90: {
						currentBlock.coordinateMode = absolute;
     480:	10 92 2e 29 	sts	0x292E, r1	; 0x80292e <currentBlock+0x1e>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     484:	80 e0       	ldi	r24, 0x00	; 0
						currentBlock.motion = Home;
						break;
					}
					case 90: {
						currentBlock.coordinateMode = absolute;
						break;
     486:	7e c1       	rjmp	.+764    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
					}
					case 91: {
						currentBlock.coordinateMode = incremental;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 2e 29 	sts	0x292E, r24	; 0x80292e <currentBlock+0x1e>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     48e:	80 e0       	ldi	r24, 0x00	; 0
						currentBlock.coordinateMode = absolute;
						break;
					}
					case 91: {
						currentBlock.coordinateMode = incremental;
						break;
     490:	79 c1       	rjmp	.+754    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
				break;
			}
			
			case 'I':{
				//Arc center X
				currentBlock.arcCentre.x = Metric2Step(num + (fraction / pow(10, precision)));
     492:	6d 2d       	mov	r22, r13
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__floatunsisf>
     49e:	9b 01       	movw	r18, r22
     4a0:	ac 01       	movw	r20, r24
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	80 e2       	ldi	r24, 0x20	; 32
     4a8:	91 e4       	ldi	r25, 0x41	; 65
     4aa:	0e 94 a3 09 	call	0x1346	; 0x1346 <pow>
     4ae:	4b 01       	movw	r8, r22
     4b0:	5c 01       	movw	r10, r24
     4b2:	61 2f       	mov	r22, r17
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     4be:	a5 01       	movw	r20, r10
     4c0:	94 01       	movw	r18, r8
     4c2:	0e 94 a8 07 	call	0xf50	; 0xf50 <__divsf3>
     4c6:	4b 01       	movw	r8, r22
     4c8:	5c 01       	movw	r10, r24
     4ca:	b7 01       	movw	r22, r14
     4cc:	ff 0c       	add	r15, r15
     4ce:	88 0b       	sbc	r24, r24
     4d0:	99 0b       	sbc	r25, r25
     4d2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     4d6:	9b 01       	movw	r18, r22
     4d8:	ac 01       	movw	r20, r24
     4da:	c5 01       	movw	r24, r10
     4dc:	b4 01       	movw	r22, r8
     4de:	0e 94 3c 07 	call	0xe78	; 0xe78 <__addsf3>
     4e2:	0e 94 03 07 	call	0xe06	; 0xe06 <Metric2Step>
     4e6:	60 93 19 29 	sts	0x2919, r22	; 0x802919 <currentBlock+0x9>
     4ea:	70 93 1a 29 	sts	0x291A, r23	; 0x80291a <currentBlock+0xa>
     4ee:	80 93 1b 29 	sts	0x291B, r24	; 0x80291b <currentBlock+0xb>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     4f2:	80 e0       	ldi	r24, 0x00	; 0
			}
			
			case 'I':{
				//Arc center X
				currentBlock.arcCentre.x = Metric2Step(num + (fraction / pow(10, precision)));
				break;	
     4f4:	47 c1       	rjmp	.+654    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
			}
			case 'J':{
				//Arc center Y
				currentBlock.arcCentre.y = Metric2Step(num + (fraction / pow(10, precision)));
     4f6:	6d 2d       	mov	r22, r13
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__floatunsisf>
     502:	9b 01       	movw	r18, r22
     504:	ac 01       	movw	r20, r24
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	80 e2       	ldi	r24, 0x20	; 32
     50c:	91 e4       	ldi	r25, 0x41	; 65
     50e:	0e 94 a3 09 	call	0x1346	; 0x1346 <pow>
     512:	4b 01       	movw	r8, r22
     514:	5c 01       	movw	r10, r24
     516:	61 2f       	mov	r22, r17
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     522:	a5 01       	movw	r20, r10
     524:	94 01       	movw	r18, r8
     526:	0e 94 a8 07 	call	0xf50	; 0xf50 <__divsf3>
     52a:	4b 01       	movw	r8, r22
     52c:	5c 01       	movw	r10, r24
     52e:	b7 01       	movw	r22, r14
     530:	ff 0c       	add	r15, r15
     532:	88 0b       	sbc	r24, r24
     534:	99 0b       	sbc	r25, r25
     536:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     53a:	9b 01       	movw	r18, r22
     53c:	ac 01       	movw	r20, r24
     53e:	c5 01       	movw	r24, r10
     540:	b4 01       	movw	r22, r8
     542:	0e 94 3c 07 	call	0xe78	; 0xe78 <__addsf3>
     546:	0e 94 03 07 	call	0xe06	; 0xe06 <Metric2Step>
     54a:	60 93 1c 29 	sts	0x291C, r22	; 0x80291c <currentBlock+0xc>
     54e:	70 93 1d 29 	sts	0x291D, r23	; 0x80291d <currentBlock+0xd>
     552:	80 93 1e 29 	sts	0x291E, r24	; 0x80291e <currentBlock+0xe>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     556:	80 e0       	ldi	r24, 0x00	; 0
				break;	
			}
			case 'J':{
				//Arc center Y
				currentBlock.arcCentre.y = Metric2Step(num + (fraction / pow(10, precision)));
				break;
     558:	15 c1       	rjmp	.+554    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
			}
			case 'K':{
				//Arc center Z
				currentBlock.arcCentre.z = Metric2Step(num + (fraction / pow(10, precision)));
     55a:	6d 2d       	mov	r22, r13
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__floatunsisf>
     566:	9b 01       	movw	r18, r22
     568:	ac 01       	movw	r20, r24
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	80 e2       	ldi	r24, 0x20	; 32
     570:	91 e4       	ldi	r25, 0x41	; 65
     572:	0e 94 a3 09 	call	0x1346	; 0x1346 <pow>
     576:	4b 01       	movw	r8, r22
     578:	5c 01       	movw	r10, r24
     57a:	61 2f       	mov	r22, r17
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     586:	a5 01       	movw	r20, r10
     588:	94 01       	movw	r18, r8
     58a:	0e 94 a8 07 	call	0xf50	; 0xf50 <__divsf3>
     58e:	4b 01       	movw	r8, r22
     590:	5c 01       	movw	r10, r24
     592:	b7 01       	movw	r22, r14
     594:	ff 0c       	add	r15, r15
     596:	88 0b       	sbc	r24, r24
     598:	99 0b       	sbc	r25, r25
     59a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     59e:	9b 01       	movw	r18, r22
     5a0:	ac 01       	movw	r20, r24
     5a2:	c5 01       	movw	r24, r10
     5a4:	b4 01       	movw	r22, r8
     5a6:	0e 94 3c 07 	call	0xe78	; 0xe78 <__addsf3>
     5aa:	0e 94 03 07 	call	0xe06	; 0xe06 <Metric2Step>
     5ae:	60 93 1f 29 	sts	0x291F, r22	; 0x80291f <currentBlock+0xf>
     5b2:	70 93 20 29 	sts	0x2920, r23	; 0x802920 <currentBlock+0x10>
     5b6:	80 93 21 29 	sts	0x2921, r24	; 0x802921 <currentBlock+0x11>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     5ba:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			case 'K':{
				//Arc center Z
				currentBlock.arcCentre.z = Metric2Step(num + (fraction / pow(10, precision)));
				break;	
     5bc:	e3 c0       	rjmp	.+454    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
			}
			case 'M':{
				//Machine commands
				switch(num){
     5be:	8f e1       	ldi	r24, 0x1F	; 31
     5c0:	e8 16       	cp	r14, r24
     5c2:	f1 04       	cpc	r15, r1
     5c4:	08 f0       	brcs	.+2      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
     5c6:	dd c0       	rjmp	.+442    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
     5c8:	f7 01       	movw	r30, r14
     5ca:	e7 53       	subi	r30, 0x37	; 55
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__tablejump2__>
					case 0: {
						//Compulsory stop
						ReportStatus(STOP_DETECTED, 0);
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	0e 94 48 01 	call	0x290	; 0x290 <ReportStatus>
						
					}
					case 1: {
						//Optional stop
						ReportStatus(STOP_DETECTED, 0);
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	0e 94 48 01 	call	0x290	; 0x290 <ReportStatus>
					}
					case 2: {
						//End of program
						ReportStatus(STOP_DETECTED, 0);
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	0e 94 48 01 	call	0x290	; 0x290 <ReportStatus>
					}
					case 3: case 4: {
						//Spindle (dispenser) on
						currentBlock.dispenseEnable = true;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	80 93 29 29 	sts	0x2929, r24	; 0x802929 <currentBlock+0x19>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
						ReportStatus(STOP_DETECTED, 0);
					}
					case 3: case 4: {
						//Spindle (dispenser) on
						currentBlock.dispenseEnable = true;
						break;
     5f8:	c5 c0       	rjmp	.+394    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
					}
					case 5: {
						//Spindle (dispenser) off
						currentBlock.dispenseEnable = false;
     5fa:	10 92 29 29 	sts	0x2929, r1	; 0x802929 <currentBlock+0x19>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     5fe:	80 e0       	ldi	r24, 0x00	; 0
						break;
					}
					case 5: {
						//Spindle (dispenser) off
						currentBlock.dispenseEnable = false;
						break;
     600:	c1 c0       	rjmp	.+386    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
					}
					case 30: {
						//End of program, return to program top
						ReportStatus(STOP_DETECTED, 0);
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 48 01 	call	0x290	; 0x290 <ReportStatus>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	ba c0       	rjmp	.+372    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
				
				break;
			}
			case 'P':{
				//Parameter for G and M
				parameter = num;
     610:	e0 92 02 28 	sts	0x2802, r14	; 0x802802 <__data_end>
     614:	f0 92 03 28 	sts	0x2803, r15	; 0x802803 <__data_end+0x1>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     618:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			case 'P':{
				//Parameter for G and M
				parameter = num;
				break;
     61a:	b4 c0       	rjmp	.+360    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
			}
			case 'R':{
				//Arc radius
				currentBlock.arcRadius = 0; //Not implemented
     61c:	10 92 22 29 	sts	0x2922, r1	; 0x802922 <currentBlock+0x12>
     620:	10 92 23 29 	sts	0x2923, r1	; 0x802923 <currentBlock+0x13>
     624:	10 92 24 29 	sts	0x2924, r1	; 0x802924 <currentBlock+0x14>
     628:	10 92 25 29 	sts	0x2925, r1	; 0x802925 <currentBlock+0x15>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     62c:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			case 'R':{
				//Arc radius
				currentBlock.arcRadius = 0; //Not implemented
				break;
     62e:	aa c0       	rjmp	.+340    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
			}
			case 'S':{
				//Spindle speed
				currentBlock.dispenseRate = num;
     630:	e0 92 27 29 	sts	0x2927, r14	; 0x802927 <currentBlock+0x17>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     634:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			case 'S':{
				//Spindle speed
				currentBlock.dispenseRate = num;
				break;
     636:	a6 c0       	rjmp	.+332    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
			}
			case 'X':{
				//Position X
				currentBlock.pos.x = Metric2Step(num + (fraction / pow(10, precision)));
     638:	6d 2d       	mov	r22, r13
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__floatunsisf>
     644:	9b 01       	movw	r18, r22
     646:	ac 01       	movw	r20, r24
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	80 e2       	ldi	r24, 0x20	; 32
     64e:	91 e4       	ldi	r25, 0x41	; 65
     650:	0e 94 a3 09 	call	0x1346	; 0x1346 <pow>
     654:	4b 01       	movw	r8, r22
     656:	5c 01       	movw	r10, r24
     658:	61 2f       	mov	r22, r17
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     664:	a5 01       	movw	r20, r10
     666:	94 01       	movw	r18, r8
     668:	0e 94 a8 07 	call	0xf50	; 0xf50 <__divsf3>
     66c:	4b 01       	movw	r8, r22
     66e:	5c 01       	movw	r10, r24
     670:	b7 01       	movw	r22, r14
     672:	ff 0c       	add	r15, r15
     674:	88 0b       	sbc	r24, r24
     676:	99 0b       	sbc	r25, r25
     678:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     67c:	9b 01       	movw	r18, r22
     67e:	ac 01       	movw	r20, r24
     680:	c5 01       	movw	r24, r10
     682:	b4 01       	movw	r22, r8
     684:	0e 94 3c 07 	call	0xe78	; 0xe78 <__addsf3>
     688:	0e 94 03 07 	call	0xe06	; 0xe06 <Metric2Step>
     68c:	60 93 10 29 	sts	0x2910, r22	; 0x802910 <currentBlock>
     690:	70 93 11 29 	sts	0x2911, r23	; 0x802911 <currentBlock+0x1>
     694:	80 93 12 29 	sts	0x2912, r24	; 0x802912 <currentBlock+0x2>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     698:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			case 'X':{
				//Position X
				currentBlock.pos.x = Metric2Step(num + (fraction / pow(10, precision)));
				break;
     69a:	74 c0       	rjmp	.+232    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
			}
			case 'Y':{
				//Position Y
				currentBlock.pos.y = Metric2Step(num + (fraction / pow(10, precision)));
     69c:	6d 2d       	mov	r22, r13
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__floatunsisf>
     6a8:	9b 01       	movw	r18, r22
     6aa:	ac 01       	movw	r20, r24
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	80 e2       	ldi	r24, 0x20	; 32
     6b2:	91 e4       	ldi	r25, 0x41	; 65
     6b4:	0e 94 a3 09 	call	0x1346	; 0x1346 <pow>
     6b8:	4b 01       	movw	r8, r22
     6ba:	5c 01       	movw	r10, r24
     6bc:	61 2f       	mov	r22, r17
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     6c8:	a5 01       	movw	r20, r10
     6ca:	94 01       	movw	r18, r8
     6cc:	0e 94 a8 07 	call	0xf50	; 0xf50 <__divsf3>
     6d0:	4b 01       	movw	r8, r22
     6d2:	5c 01       	movw	r10, r24
     6d4:	b7 01       	movw	r22, r14
     6d6:	ff 0c       	add	r15, r15
     6d8:	88 0b       	sbc	r24, r24
     6da:	99 0b       	sbc	r25, r25
     6dc:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	c5 01       	movw	r24, r10
     6e6:	b4 01       	movw	r22, r8
     6e8:	0e 94 3c 07 	call	0xe78	; 0xe78 <__addsf3>
     6ec:	0e 94 03 07 	call	0xe06	; 0xe06 <Metric2Step>
     6f0:	60 93 13 29 	sts	0x2913, r22	; 0x802913 <currentBlock+0x3>
     6f4:	70 93 14 29 	sts	0x2914, r23	; 0x802914 <currentBlock+0x4>
     6f8:	80 93 15 29 	sts	0x2915, r24	; 0x802915 <currentBlock+0x5>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     6fc:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			case 'Y':{
				//Position Y
				currentBlock.pos.y = Metric2Step(num + (fraction / pow(10, precision)));
				break;
     6fe:	42 c0       	rjmp	.+132    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
			}
			case 'Z':{
				//Position Z
				currentBlock.pos.z = Metric2Step(num + (fraction / pow(10, precision)));
     700:	6d 2d       	mov	r22, r13
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__floatunsisf>
     70c:	9b 01       	movw	r18, r22
     70e:	ac 01       	movw	r20, r24
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	80 e2       	ldi	r24, 0x20	; 32
     716:	91 e4       	ldi	r25, 0x41	; 65
     718:	0e 94 a3 09 	call	0x1346	; 0x1346 <pow>
     71c:	4b 01       	movw	r8, r22
     71e:	5c 01       	movw	r10, r24
     720:	61 2f       	mov	r22, r17
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     72c:	a5 01       	movw	r20, r10
     72e:	94 01       	movw	r18, r8
     730:	0e 94 a8 07 	call	0xf50	; 0xf50 <__divsf3>
     734:	4b 01       	movw	r8, r22
     736:	5c 01       	movw	r10, r24
     738:	b7 01       	movw	r22, r14
     73a:	ff 0c       	add	r15, r15
     73c:	88 0b       	sbc	r24, r24
     73e:	99 0b       	sbc	r25, r25
     740:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
     748:	c5 01       	movw	r24, r10
     74a:	b4 01       	movw	r22, r8
     74c:	0e 94 3c 07 	call	0xe78	; 0xe78 <__addsf3>
     750:	0e 94 03 07 	call	0xe06	; 0xe06 <Metric2Step>
     754:	60 93 16 29 	sts	0x2916, r22	; 0x802916 <currentBlock+0x6>
     758:	70 93 17 29 	sts	0x2917, r23	; 0x802917 <currentBlock+0x7>
     75c:	80 93 18 29 	sts	0x2918, r24	; 0x802918 <currentBlock+0x8>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     760:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			case 'Z':{
				//Position Z
				currentBlock.pos.z = Metric2Step(num + (fraction / pow(10, precision)));
				break;
     762:	10 c0       	rjmp	.+32     	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
			}
			default:{
				ReportStatus(NOT_RECOGNIZED, letter);
     764:	60 2f       	mov	r22, r16
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	83 e0       	ldi	r24, 0x03	; 3
     76a:	0e 94 48 01 	call	0x290	; 0x290 <ReportStatus>
				return NOT_RECOGNIZED; //Unrecognized command
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	09 c0       	rjmp	.+18     	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
	{
		if (wordIndex > 0)
		{
			ReportStatus(SHORT_WORD, currentWord[0]);
		}
		return SHORT_WORD;
     772:	88 e0       	ldi	r24, 0x08	; 8
     774:	07 c0       	rjmp	.+14     	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	05 c0       	rjmp	.+10     	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
				break;
			}
			case 'N':{
				//Line number
				
				return NONE;
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	03 c0       	rjmp	.+6      	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
				ReportStatus(NOT_RECOGNIZED, letter);
				return NOT_RECOGNIZED; //Unrecognized command
			}
		}
	}
	return NONE;
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	01 c0       	rjmp	.+2      	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     782:	80 e0       	ldi	r24, 0x00	; 0
}
     784:	60 96       	adiw	r28, 0x10	; 16
     786:	cd bf       	out	0x3d, r28	; 61
     788:	de bf       	out	0x3e, r29	; 62
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	bf 90       	pop	r11
     79c:	af 90       	pop	r10
     79e:	9f 90       	pop	r9
     7a0:	8f 90       	pop	r8
     7a2:	08 95       	ret

000007a4 <IgnoreChar>:
bool IgnoreChar(char in){
	
	if (in == ' ')
	{
		return true;
	} else if (in == 0)
     7a4:	98 2f       	mov	r25, r24
     7a6:	9f 7d       	andi	r25, 0xDF	; 223
     7a8:	f1 f0       	breq	.+60     	; 0x7e6 <IgnoreChar+0x42>
	{
		return true;
	} else if (in == '+')
     7aa:	98 2f       	mov	r25, r24
     7ac:	9b 7f       	andi	r25, 0xFB	; 251
     7ae:	9b 32       	cpi	r25, 0x2B	; 43
     7b0:	e1 f0       	breq	.+56     	; 0x7ea <IgnoreChar+0x46>
	{
		return true;
	} else if (in == '%')
     7b2:	85 32       	cpi	r24, 0x25	; 37
     7b4:	e1 f0       	breq	.+56     	; 0x7ee <IgnoreChar+0x4a>
	{
		return true;
	} else if (in == '/')
	{
		return true;
	} else if ((in == '(') || (in == ';'))
     7b6:	88 32       	cpi	r24, 0x28	; 40
     7b8:	11 f0       	breq	.+4      	; 0x7be <IgnoreChar+0x1a>
     7ba:	8b 33       	cpi	r24, 0x3B	; 59
     7bc:	31 f4       	brne	.+12     	; 0x7ca <IgnoreChar+0x26>
	{
		colons++;
     7be:	80 91 40 29 	lds	r24, 0x2940	; 0x802940 <colons>
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	80 93 40 29 	sts	0x2940, r24	; 0x802940 <colons>
     7c8:	07 c0       	rjmp	.+14     	; 0x7d8 <IgnoreChar+0x34>
	} else if (in == ')')
     7ca:	89 32       	cpi	r24, 0x29	; 41
     7cc:	29 f4       	brne	.+10     	; 0x7d8 <IgnoreChar+0x34>
	{
		colons--;
     7ce:	80 91 40 29 	lds	r24, 0x2940	; 0x802940 <colons>
     7d2:	81 50       	subi	r24, 0x01	; 1
     7d4:	80 93 40 29 	sts	0x2940, r24	; 0x802940 <colons>
	}
	
	//Ignore comments
	if (colons > 0)
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 91 40 29 	lds	r25, 0x2940	; 0x802940 <colons>
     7de:	91 11       	cpse	r25, r1
     7e0:	07 c0       	rjmp	.+14     	; 0x7f0 <IgnoreChar+0x4c>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	08 95       	ret
	if (in == ' ')
	{
		return true;
	} else if (in == 0)
	{
		return true;
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	08 95       	ret
	} else if (in == '+')
	{
		return true;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	08 95       	ret
	} else if (in == '%')
	{
		return true;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
	if (colons > 0)
	{
		return true;
	}
	return false;
}
     7f0:	08 95       	ret

000007f2 <WordEnd>:

bool WordEnd(char in){
	if (in == '.')
	{
		return false;
	} else if (in == '-')
     7f2:	93 ed       	ldi	r25, 0xD3	; 211
     7f4:	98 0f       	add	r25, r24
     7f6:	92 30       	cpi	r25, 0x02	; 2
     7f8:	38 f0       	brcs	.+14     	; 0x808 <WordEnd+0x16>
	{
		return false;
	} else if ((in <= '9') && (in >= '0'))
     7fa:	90 ed       	ldi	r25, 0xD0	; 208
     7fc:	98 0f       	add	r25, r24
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	9a 30       	cpi	r25, 0x0A	; 10
     802:	18 f4       	brcc	.+6      	; 0x80a <WordEnd+0x18>
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	08 95       	ret
	if (in == '.')
	{
		return false;
	} else if (in == '-')
	{
		return false;
     808:	80 e0       	ldi	r24, 0x00	; 0
	} else if ((in <= '9') && (in >= '0'))
	{
		return false;
	}
	return true;
}
     80a:	08 95       	ret

0000080c <BlockBufferAvailable>:

ReturnCodes BlockBufferAvailable(){
	if(blockBufferTail == blockBufferHead){
     80c:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <blockBufferTail>
     810:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <blockBufferHead>
     814:	98 17       	cp	r25, r24
     816:	41 f0       	breq	.+16     	; 0x828 <BlockBufferAvailable+0x1c>
		return BUFFER_EMPTY;
	}
	
	uint8_t tempHead = blockBufferHead + 1;
     818:	8f 5f       	subi	r24, 0xFF	; 255
	if (tempHead >= BLOCK_BUFFER_SIZE)
     81a:	88 30       	cpi	r24, 0x08	; 8
     81c:	08 f0       	brcs	.+2      	; 0x820 <BlockBufferAvailable+0x14>
	{
		tempHead = 0;
     81e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	if (blockBufferTail == tempHead)
     820:	89 17       	cp	r24, r25
     822:	21 f0       	breq	.+8      	; 0x82c <BlockBufferAvailable+0x20>
	{
		return BUFFER_FULL;
	}
	return BUFFER_AVAILABLE;
     824:	85 e0       	ldi	r24, 0x05	; 5
     826:	08 95       	ret
	return true;
}

ReturnCodes BlockBufferAvailable(){
	if(blockBufferTail == blockBufferHead){
		return BUFFER_EMPTY;
     828:	86 e0       	ldi	r24, 0x06	; 6
     82a:	08 95       	ret
		tempHead = 0;
	}
	
	if (blockBufferTail == tempHead)
	{
		return BUFFER_FULL;
     82c:	84 e0       	ldi	r24, 0x04	; 4
	}
	return BUFFER_AVAILABLE;
}
     82e:	08 95       	ret

00000830 <WriteBlockBuffer>:

void WriteBlockBuffer(gc_block block){
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
	blockBufferHead++;
     838:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <blockBufferHead>
     83c:	8f 5f       	subi	r24, 0xFF	; 255

	if (blockBufferHead >= BLOCK_BUFFER_SIZE)
     83e:	88 30       	cpi	r24, 0x08	; 8
     840:	18 f4       	brcc	.+6      	; 0x848 <WriteBlockBuffer+0x18>
	}
	return BUFFER_AVAILABLE;
}

void WriteBlockBuffer(gc_block block){
	blockBufferHead++;
     842:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <blockBufferHead>
     846:	02 c0       	rjmp	.+4      	; 0x84c <WriteBlockBuffer+0x1c>

	if (blockBufferHead >= BLOCK_BUFFER_SIZE)
	{
		blockBufferHead = 0;
     848:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <blockBufferHead>
	}

	blockBuffer[blockBufferHead] = block;
     84c:	a0 91 07 28 	lds	r26, 0x2807	; 0x802807 <blockBufferHead>
     850:	80 e2       	ldi	r24, 0x20	; 32
     852:	a8 9f       	mul	r26, r24
     854:	d0 01       	movw	r26, r0
     856:	11 24       	eor	r1, r1
     858:	a0 5f       	subi	r26, 0xF0	; 240
     85a:	b7 4d       	sbci	r27, 0xD7	; 215
     85c:	80 e2       	ldi	r24, 0x20	; 32
     85e:	fe 01       	movw	r30, r28
     860:	35 96       	adiw	r30, 0x05	; 5
     862:	01 90       	ld	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	8a 95       	dec	r24
     868:	e1 f7       	brne	.-8      	; 0x862 <WriteBlockBuffer+0x32>
}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <ParseStream>:
gc_block currentBlock;
uint8_t wordIndex = 0;
bool freshBlock = true;				// True if currentblock contains no new info
char currentWord[MAX_WORD_SIZE];

ReturnCodes ParseStream(){
     870:	cf 93       	push	r28
	static bool readyBlock = false;
	
	//Skips if current block hasn't been placed in buffer yet
	if (readyBlock)
     872:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <readyBlock.3582>
     876:	88 23       	and	r24, r24
     878:	f1 f0       	breq	.+60     	; 0x8b6 <ParseStream+0x46>
	{
		//Check if buffer is full
		if (BlockBufferAvailable() == BUFFER_FULL)
     87a:	0e 94 06 04 	call	0x80c	; 0x80c <BlockBufferAvailable>
     87e:	c8 2f       	mov	r28, r24
     880:	84 30       	cpi	r24, 0x04	; 4
     882:	09 f4       	brne	.+2      	; 0x886 <ParseStream+0x16>
     884:	83 c0       	rjmp	.+262    	; 0x98c <ParseStream+0x11c>
			return BUFFER_FULL;
		} 
		else
		{
			//ReportStatus(BUFFER_AVAILABLE);
			WriteBlockBuffer(currentBlock);
     886:	8d b7       	in	r24, 0x3d	; 61
     888:	9e b7       	in	r25, 0x3e	; 62
     88a:	80 97       	sbiw	r24, 0x20	; 32
     88c:	8d bf       	out	0x3d, r24	; 61
     88e:	9e bf       	out	0x3e, r25	; 62
     890:	ad b7       	in	r26, 0x3d	; 61
     892:	be b7       	in	r27, 0x3e	; 62
     894:	11 96       	adiw	r26, 0x01	; 1
     896:	80 e2       	ldi	r24, 0x20	; 32
     898:	e0 e1       	ldi	r30, 0x10	; 16
     89a:	f9 e2       	ldi	r31, 0x29	; 41
     89c:	01 90       	ld	r0, Z+
     89e:	0d 92       	st	X+, r0
     8a0:	8a 95       	dec	r24
     8a2:	e1 f7       	brne	.-8      	; 0x89c <ParseStream+0x2c>
     8a4:	0e 94 18 04 	call	0x830	; 0x830 <WriteBlockBuffer>
			readyBlock = false;
     8a8:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <readyBlock.3582>
     8ac:	8d b7       	in	r24, 0x3d	; 61
     8ae:	9e b7       	in	r25, 0x3e	; 62
     8b0:	80 96       	adiw	r24, 0x20	; 32
     8b2:	8d bf       	out	0x3d, r24	; 61
     8b4:	9e bf       	out	0x3e, r25	; 62
		
	}
	
	//Load next character from buffer
	//Check if there is data
	char nextChar = RX_read();
     8b6:	0e 94 4c 05 	call	0xa98	; 0xa98 <RX_read>
     8ba:	c8 2f       	mov	r28, r24
	//char nextChar = USARTn.RXDATAL;
	
	//Discard ignored chars
	if (IgnoreChar(nextChar)){
     8bc:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <IgnoreChar>
     8c0:	81 11       	cpse	r24, r1
     8c2:	63 c0       	rjmp	.+198    	; 0x98a <ParseStream+0x11a>
		return NONE;
	}
	
	//Detect line end
	if ((nextChar == '\r' || nextChar == '\n')){
     8c4:	cd 30       	cpi	r28, 0x0D	; 13
     8c6:	11 f0       	breq	.+4      	; 0x8cc <ParseStream+0x5c>
     8c8:	ca 30       	cpi	r28, 0x0A	; 10
     8ca:	e9 f5       	brne	.+122    	; 0x946 <ParseStream+0xd6>
		
		if(ParseWord() == NONE){
     8cc:	0e 94 8b 01 	call	0x316	; 0x316 <ParseWord>
     8d0:	81 11       	cpse	r24, r1
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <ParseStream+0x68>
			freshBlock = false;
     8d4:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__data_start>
		}
		wordIndex = 0;	
     8d8:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <wordIndex>
		if(freshBlock == false){
     8dc:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     8e0:	81 11       	cpse	r24, r1
     8e2:	3a c0       	rjmp	.+116    	; 0x958 <ParseStream+0xe8>
			colons = 0;
     8e4:	10 92 40 29 	sts	0x2940, r1	; 0x802940 <colons>
			freshBlock = true;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__data_start>
			
			//Push the block into buffer unless it is full
			readyBlock = true;
     8ee:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <readyBlock.3582>
			if(BlockBufferAvailable() == BUFFER_FULL){
     8f2:	0e 94 06 04 	call	0x80c	; 0x80c <BlockBufferAvailable>
     8f6:	c8 2f       	mov	r28, r24
     8f8:	84 30       	cpi	r24, 0x04	; 4
     8fa:	31 f4       	brne	.+12     	; 0x908 <ParseStream+0x98>
				ReportStatus(BUFFER_FULL, 'B');
     8fc:	62 e4       	ldi	r22, 0x42	; 66
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	84 e0       	ldi	r24, 0x04	; 4
     902:	0e 94 48 01 	call	0x290	; 0x290 <ReportStatus>
				return BUFFER_FULL;
     906:	42 c0       	rjmp	.+132    	; 0x98c <ParseStream+0x11c>
			} else {
				WriteBlockBuffer(currentBlock);
     908:	8d b7       	in	r24, 0x3d	; 61
     90a:	9e b7       	in	r25, 0x3e	; 62
     90c:	80 97       	sbiw	r24, 0x20	; 32
     90e:	8d bf       	out	0x3d, r24	; 61
     910:	9e bf       	out	0x3e, r25	; 62
     912:	ad b7       	in	r26, 0x3d	; 61
     914:	be b7       	in	r27, 0x3e	; 62
     916:	11 96       	adiw	r26, 0x01	; 1
     918:	80 e2       	ldi	r24, 0x20	; 32
     91a:	e0 e1       	ldi	r30, 0x10	; 16
     91c:	f9 e2       	ldi	r31, 0x29	; 41
     91e:	01 90       	ld	r0, Z+
     920:	0d 92       	st	X+, r0
     922:	8a 95       	dec	r24
     924:	e1 f7       	brne	.-8      	; 0x91e <ParseStream+0xae>
     926:	0e 94 18 04 	call	0x830	; 0x830 <WriteBlockBuffer>
				readyBlock = false;
     92a:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <readyBlock.3582>
			}
			ReportStatus(NEW_BLOCK, 0);
     92e:	8d b7       	in	r24, 0x3d	; 61
     930:	9e b7       	in	r25, 0x3e	; 62
     932:	80 96       	adiw	r24, 0x20	; 32
     934:	8d bf       	out	0x3d, r24	; 61
     936:	9e bf       	out	0x3e, r25	; 62
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	0e 94 48 01 	call	0x290	; 0x290 <ReportStatus>
			return NEW_BLOCK;
     942:	c2 e0       	ldi	r28, 0x02	; 2
     944:	23 c0       	rjmp	.+70     	; 0x98c <ParseStream+0x11c>
		}
	}
	
	//Detect word overflow
	if (wordIndex >= (MAX_WORD_SIZE - 1))
     946:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <wordIndex>
     94a:	8f 30       	cpi	r24, 0x0F	; 15
     94c:	28 f0       	brcs	.+10     	; 0x958 <ParseStream+0xe8>
	{
		ReportStatus(BUFFER_OVERFLOW, 'W');
     94e:	67 e5       	ldi	r22, 0x57	; 87
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	87 e0       	ldi	r24, 0x07	; 7
     954:	0e 94 48 01 	call	0x290	; 0x290 <ReportStatus>
	}
	
	//Checks if a new word has started
	if (WordEnd(nextChar)){
     958:	8c 2f       	mov	r24, r28
     95a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <WordEnd>
     95e:	88 23       	and	r24, r24
     960:	41 f0       	breq	.+16     	; 0x972 <ParseStream+0x102>
		if(ParseWord() == NONE){
     962:	0e 94 8b 01 	call	0x316	; 0x316 <ParseWord>
     966:	81 11       	cpse	r24, r1
     968:	02 c0       	rjmp	.+4      	; 0x96e <ParseStream+0xfe>
			freshBlock = false;
     96a:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__data_start>
		}
		wordIndex = 0;
     96e:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <wordIndex>
	}
	
	currentWord[wordIndex] = nextChar;
     972:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <wordIndex>
     976:	e8 2f       	mov	r30, r24
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	e0 5d       	subi	r30, 0xD0	; 208
     97c:	f6 4d       	sbci	r31, 0xD6	; 214
     97e:	c0 83       	st	Z, r28
	wordIndex++;
     980:	8f 5f       	subi	r24, 0xFF	; 255
     982:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <wordIndex>

	return NONE;
     986:	c0 e0       	ldi	r28, 0x00	; 0
     988:	01 c0       	rjmp	.+2      	; 0x98c <ParseStream+0x11c>
	char nextChar = RX_read();
	//char nextChar = USARTn.RXDATAL;
	
	//Discard ignored chars
	if (IgnoreChar(nextChar)){
		return NONE;
     98a:	c0 e0       	ldi	r28, 0x00	; 0
	
	currentWord[wordIndex] = nextChar;
	wordIndex++;

	return NONE;
}
     98c:	8c 2f       	mov	r24, r28
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <InitParser>:
	return NONE;
}

void InitParser(){
	//Reset buffer indexes
	wordIndex = 0;
     992:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <wordIndex>
	blockBufferHead = 0;
     996:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <blockBufferHead>
	blockBufferTail = 0;
     99a:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <blockBufferTail>
	
	//Set default block values
	currentBlock.pos.x.full = 0;
     99e:	e0 e1       	ldi	r30, 0x10	; 16
     9a0:	f9 e2       	ldi	r31, 0x29	; 41
     9a2:	10 82       	st	Z, r1
     9a4:	11 82       	std	Z+1, r1	; 0x01
	currentBlock.pos.x.micro = 0;
     9a6:	12 82       	std	Z+2, r1	; 0x02
	currentBlock.pos.y.full = 0;
     9a8:	13 82       	std	Z+3, r1	; 0x03
     9aa:	14 82       	std	Z+4, r1	; 0x04
	currentBlock.pos.y.micro = 0;
     9ac:	15 82       	std	Z+5, r1	; 0x05
	currentBlock.pos.z.full = 0;
     9ae:	16 82       	std	Z+6, r1	; 0x06
     9b0:	17 82       	std	Z+7, r1	; 0x07
	currentBlock.pos.z.micro = 0;
     9b2:	10 86       	std	Z+8, r1	; 0x08
	currentBlock.motion = Home;
     9b4:	85 e0       	ldi	r24, 0x05	; 5
     9b6:	86 8b       	std	Z+22, r24	; 0x16
	currentBlock.dispenseRate = 0;
     9b8:	17 8a       	std	Z+23, r1	; 0x17
	currentBlock.moveSpeed = 0;
     9ba:	10 8e       	std	Z+24, r1	; 0x18
	currentBlock.dispenseEnable = false;
     9bc:	11 8e       	std	Z+25, r1	; 0x19
	currentBlock.dwellTime = 0;
     9be:	12 8e       	std	Z+26, r1	; 0x1a
     9c0:	13 8e       	std	Z+27, r1	; 0x1b
     9c2:	14 8e       	std	Z+28, r1	; 0x1c
     9c4:	15 8e       	std	Z+29, r1	; 0x1d
	currentBlock.coordinateMode = absolute;
     9c6:	16 8e       	std	Z+30, r1	; 0x1e
	currentBlock.coordinateUnit = millimeter;
     9c8:	17 8e       	std	Z+31, r1	; 0x1f
	
	WriteBlockBuffer(currentBlock);
     9ca:	8d b7       	in	r24, 0x3d	; 61
     9cc:	9e b7       	in	r25, 0x3e	; 62
     9ce:	80 97       	sbiw	r24, 0x20	; 32
     9d0:	8d bf       	out	0x3d, r24	; 61
     9d2:	9e bf       	out	0x3e, r25	; 62
     9d4:	ad b7       	in	r26, 0x3d	; 61
     9d6:	be b7       	in	r27, 0x3e	; 62
     9d8:	11 96       	adiw	r26, 0x01	; 1
     9da:	80 e2       	ldi	r24, 0x20	; 32
     9dc:	01 90       	ld	r0, Z+
     9de:	0d 92       	st	X+, r0
     9e0:	8a 95       	dec	r24
     9e2:	e1 f7       	brne	.-8      	; 0x9dc <InitParser+0x4a>
     9e4:	0e 94 18 04 	call	0x830	; 0x830 <WriteBlockBuffer>
}
     9e8:	8d b7       	in	r24, 0x3d	; 61
     9ea:	9e b7       	in	r25, 0x3e	; 62
     9ec:	80 96       	adiw	r24, 0x20	; 32
     9ee:	8d bf       	out	0x3d, r24	; 61
     9f0:	9e bf       	out	0x3e, r25	; 62
     9f2:	08 95       	ret

000009f4 <USART_INIT>:
uint8_t tx_buffer_data[TX_BUFFERSIZE];

bool RX_Full = false;
bool prevRX_Full = false;

void USART_INIT(uint8_t portnum, uint32_t baudrate){
     9f4:	cf 93       	push	r28
     9f6:	c8 2f       	mov	r28, r24
     9f8:	9a 01       	movw	r18, r20
     9fa:	ab 01       	movw	r20, r22
	
	//Division needed to get desired baudrate
	uint16_t baudDiv = (4 * fCLK_PER / baudrate);
     9fc:	65 e5       	ldi	r22, 0x55	; 85
     9fe:	73 e7       	ldi	r23, 0x73	; 115
     a00:	8b ec       	ldi	r24, 0xCB	; 203
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 3e 0b 	call	0x167c	; 0x167c <__udivmodsi4>
	uint8_t RB = USART_RXEN_bm|USART_TXEN_bm;
	
	//Set no parity, 8 data-bits
	uint8_t RC = USART_PMODE_DISABLED_gc|(0x3);
	
	switch (portnum)
     a08:	c1 30       	cpi	r28, 0x01	; 1
     a0a:	99 f0       	breq	.+38     	; 0xa32 <USART_INIT+0x3e>
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <USART_INIT+0x24>
     a0e:	c2 30       	cpi	r28, 0x02	; 2
     a10:	e9 f0       	breq	.+58     	; 0xa4c <USART_INIT+0x58>
     a12:	c3 30       	cpi	r28, 0x03	; 3
     a14:	41 f1       	breq	.+80     	; 0xa66 <USART_INIT+0x72>
     a16:	33 c0       	rjmp	.+102    	; 0xa7e <USART_INIT+0x8a>
	{
	case 0:
		USART0.BAUD = baudDiv;
     a18:	e0 e0       	ldi	r30, 0x00	; 0
     a1a:	f8 e0       	ldi	r31, 0x08	; 8
     a1c:	20 87       	std	Z+8, r18	; 0x08
     a1e:	31 87       	std	Z+9, r19	; 0x09
		USART0.CTRLA = RA;
     a20:	80 ec       	ldi	r24, 0xC0	; 192
     a22:	85 83       	std	Z+5, r24	; 0x05
		USART0.CTRLC = RC;
     a24:	93 e0       	ldi	r25, 0x03	; 3
     a26:	97 83       	std	Z+7, r25	; 0x07
		PORTA.DIRSET = 1 << 0;		//PA0 is output
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
		USART0.CTRLB = RB;
     a2e:	86 83       	std	Z+6, r24	; 0x06
        
		break;
     a30:	26 c0       	rjmp	.+76     	; 0xa7e <USART_INIT+0x8a>
	case 1:
		USART1.BAUD = baudDiv;
     a32:	e0 e2       	ldi	r30, 0x20	; 32
     a34:	f8 e0       	ldi	r31, 0x08	; 8
     a36:	20 87       	std	Z+8, r18	; 0x08
     a38:	31 87       	std	Z+9, r19	; 0x09
		USART1.CTRLA = RA;
     a3a:	80 ec       	ldi	r24, 0xC0	; 192
     a3c:	85 83       	std	Z+5, r24	; 0x05
		USART1.CTRLC = RC;
     a3e:	93 e0       	ldi	r25, 0x03	; 3
     a40:	97 83       	std	Z+7, r25	; 0x07
		PORTC.DIRSET = 1 << 0;		//PC0 is output
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <__TEXT_REGION_LENGTH__+0x700441>
		USART1.CTRLB = RB;
     a48:	86 83       	std	Z+6, r24	; 0x06
        
		break;
     a4a:	19 c0       	rjmp	.+50     	; 0xa7e <USART_INIT+0x8a>
	case 2:
		USART2.BAUD = baudDiv;
     a4c:	e0 e4       	ldi	r30, 0x40	; 64
     a4e:	f8 e0       	ldi	r31, 0x08	; 8
     a50:	20 87       	std	Z+8, r18	; 0x08
     a52:	31 87       	std	Z+9, r19	; 0x09
		USART2.CTRLA = RA;
     a54:	80 ec       	ldi	r24, 0xC0	; 192
     a56:	85 83       	std	Z+5, r24	; 0x05
		USART2.CTRLC = RC;
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	97 83       	std	Z+7, r25	; 0x07
		PORTF.DIRSET = 1 << 0;		//PF0 is output
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7004a1>
		USART2.CTRLB = RB;
     a62:	86 83       	std	Z+6, r24	; 0x06
		break;
     a64:	0c c0       	rjmp	.+24     	; 0xa7e <USART_INIT+0x8a>
	case 3:
		USART3.BAUD = baudDiv;
     a66:	e0 e6       	ldi	r30, 0x60	; 96
     a68:	f8 e0       	ldi	r31, 0x08	; 8
     a6a:	20 87       	std	Z+8, r18	; 0x08
     a6c:	31 87       	std	Z+9, r19	; 0x09
		USART3.CTRLA = RA;
     a6e:	80 ec       	ldi	r24, 0xC0	; 192
     a70:	85 83       	std	Z+5, r24	; 0x05
		USART3.CTRLC = RC;
     a72:	93 e0       	ldi	r25, 0x03	; 3
     a74:	97 83       	std	Z+7, r25	; 0x07
		PORTB.DIRSET = 1 << 0;		//PB0 is output
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
		USART3.CTRLB = RB;
     a7c:	86 83       	std	Z+6, r24	; 0x06
		break;
	}
}
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <RX_Count>:
	}
}

// Returns available buffer space
uint8_t RX_Count(){
	int16_t cnt = rx_tail - rx_head;
     a82:	20 91 0d 28 	lds	r18, 0x280D	; 0x80280d <rx_head>
     a86:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <rx_tail>
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	82 1b       	sub	r24, r18
     a8e:	91 09       	sbc	r25, r1
	
	if (cnt < 0)
     a90:	12 f4       	brpl	.+4      	; 0xa96 <RX_Count+0x14>
	{
		cnt += RX_BUFFERSIZE;
     a92:	80 58       	subi	r24, 0x80	; 128
     a94:	9f 4f       	sbci	r25, 0xFF	; 255
	}
	return cnt;
}
     a96:	08 95       	ret

00000a98 <RX_read>:
		break;
	}
}

uint8_t RX_read()
{
     a98:	cf 93       	push	r28
    uint8_t data;
    uint8_t tail;
    tail = rx_tail + 1;
     a9a:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <rx_tail>
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	98 0f       	add	r25, r24
	
	//No data
	if (rx_head == rx_tail)
     aa2:	20 91 0d 28 	lds	r18, 0x280D	; 0x80280d <rx_head>
     aa6:	82 17       	cp	r24, r18
     aa8:	91 f0       	breq	.+36     	; 0xace <RX_read+0x36>
	{
		return 0;
	}
	
	if(tail == RX_BUFFERSIZE)
     aaa:	90 38       	cpi	r25, 0x80	; 128
     aac:	09 f4       	brne	.+2      	; 0xab0 <RX_read+0x18>
	{
		tail = 0;
     aae:	90 e0       	ldi	r25, 0x00	; 0
	}
    
    data = rx_buffer_data[tail];
     ab0:	e9 2f       	mov	r30, r25
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	ef 57       	subi	r30, 0x7F	; 127
     ab6:	f6 4d       	sbci	r31, 0xD6	; 214
     ab8:	c0 81       	ld	r28, Z
    rx_tail = tail;
     aba:	90 93 0c 28 	sts	0x280C, r25	; 0x80280c <rx_tail>
		
	// Signal that there is space in buffer
	if (RX_Count() > 20)
     abe:	0e 94 41 05 	call	0xa82	; 0xa82 <RX_Count>
     ac2:	85 31       	cpi	r24, 0x15	; 21
     ac4:	30 f0       	brcs	.+12     	; 0xad2 <RX_read+0x3a>
	{
		RX_Full = false;
     ac6:	10 92 09 28 	sts	0x2809, r1	; 0x802809 <RX_Full>
	}
        
	return data;
     aca:	8c 2f       	mov	r24, r28
     acc:	03 c0       	rjmp	.+6      	; 0xad4 <RX_read+0x3c>
    tail = rx_tail + 1;
	
	//No data
	if (rx_head == rx_tail)
	{
		return 0;
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <RX_read+0x3c>
	if (RX_Count() > 20)
	{
		RX_Full = false;
	}
        
	return data;
     ad2:	8c 2f       	mov	r24, r28
}
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <RX_write>:
void RX_write()
{
    uint8_t rx_data;
    uint8_t head;
    
    rx_data = USARTn.RXDATAL;
     ad8:	20 91 60 08 	lds	r18, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    
    //real-time commands should be picked out here
    
    
    head = rx_head + 1;
     adc:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <rx_head>
    
    if(rx_head == RX_BUFFERSIZE)
     ae0:	90 91 0d 28 	lds	r25, 0x280D	; 0x80280d <rx_head>
     ae4:	90 38       	cpi	r25, 0x80	; 128
     ae6:	11 f0       	breq	.+4      	; 0xaec <RX_write+0x14>
    rx_data = USARTn.RXDATAL;
    
    //real-time commands should be picked out here
    
    
    head = rx_head + 1;
     ae8:	8f 5f       	subi	r24, 0xFF	; 255
     aea:	01 c0       	rjmp	.+2      	; 0xaee <RX_write+0x16>
    
    if(rx_head == RX_BUFFERSIZE)
    {
        head = 0;
     aec:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    if(head != rx_tail)
     aee:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <rx_tail>
     af2:	89 17       	cp	r24, r25
     af4:	41 f0       	breq	.+16     	; 0xb06 <RX_write+0x2e>
    {
        rx_buffer_data[head] = rx_data;
     af6:	e8 2f       	mov	r30, r24
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	ef 57       	subi	r30, 0x7F	; 127
     afc:	f6 4d       	sbci	r31, 0xD6	; 214
     afe:	20 83       	st	Z, r18
        rx_head = head;
     b00:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <rx_head>
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <RX_write+0x38>
    } else {
		ReportStatus(BUFFER_OVERFLOW, 'R');
     b06:	62 e5       	ldi	r22, 0x52	; 82
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	87 e0       	ldi	r24, 0x07	; 7
     b0c:	0e 94 48 01 	call	0x290	; 0x290 <ReportStatus>
	}
	
	// Signal that buffer is full (soon)
	if (RX_Count() < 10)
     b10:	0e 94 41 05 	call	0xa82	; 0xa82 <RX_Count>
     b14:	8a 30       	cpi	r24, 0x0A	; 10
     b16:	18 f4       	brcc	.+6      	; 0xb1e <RX_write+0x46>
	{
		RX_Full = true;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <RX_Full>
     b1e:	08 95       	ret

00000b20 <RX_available>:
	}
	return cnt;
}

ReturnCodes RX_available(){
	if (rx_head == rx_tail)
     b20:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <rx_head>
     b24:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <rx_tail>
     b28:	89 17       	cp	r24, r25
     b2a:	51 f0       	breq	.+20     	; 0xb40 <RX_available+0x20>
	{
		return BUFFER_EMPTY;
	}
	
	uint8_t head = rx_head + 1;
     b2c:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <rx_head>
     b30:	8f 5f       	subi	r24, 0xFF	; 255
	if (head == RX_BUFFERSIZE)
     b32:	80 38       	cpi	r24, 0x80	; 128
     b34:	09 f4       	brne	.+2      	; 0xb38 <RX_available+0x18>
	{
		head = 0;
     b36:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	if (head == rx_tail)
     b38:	89 17       	cp	r24, r25
     b3a:	21 f0       	breq	.+8      	; 0xb44 <RX_available+0x24>
	{
		return BUFFER_FULL;
	}
	return BUFFER_AVAILABLE;
     b3c:	85 e0       	ldi	r24, 0x05	; 5
     b3e:	08 95       	ret
}

ReturnCodes RX_available(){
	if (rx_head == rx_tail)
	{
		return BUFFER_EMPTY;
     b40:	86 e0       	ldi	r24, 0x06	; 6
     b42:	08 95       	ret
		head = 0;
	}
	
	if (head == rx_tail)
	{
		return BUFFER_FULL;
     b44:	84 e0       	ldi	r24, 0x04	; 4
	}
	return BUFFER_AVAILABLE;
}
     b46:	08 95       	ret

00000b48 <TX_write>:

void TX_write(uint8_t data)
{
    uint8_t head = tx_head + 1;
     b48:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <tx_head>
     b4c:	9f 5f       	subi	r25, 0xFF	; 255
    
    if(head == TX_BUFFERSIZE)
     b4e:	90 34       	cpi	r25, 0x40	; 64
     b50:	09 f4       	brne	.+2      	; 0xb54 <TX_write+0xc>
    {  
        head = 0;
     b52:	90 e0       	ldi	r25, 0x00	; 0
    }
    
    tx_buffer_data[head] = data;
     b54:	e9 2f       	mov	r30, r25
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	ef 5b       	subi	r30, 0xBF	; 191
     b5a:	f6 4d       	sbci	r31, 0xD6	; 214
     b5c:	80 83       	st	Z, r24
    tx_head = head;
     b5e:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <tx_head>
     b62:	08 95       	ret

00000b64 <TX_read>:

void TX_read()
{
	
	// The state of the RX buffer has high priority
	if (RX_Full != prevRX_Full)
     b64:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <RX_Full>
     b68:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <prevRX_Full>
     b6c:	89 17       	cp	r24, r25
     b6e:	61 f0       	breq	.+24     	; 0xb88 <TX_read+0x24>
	{
		if (RX_Full)
     b70:	88 23       	and	r24, r24
     b72:	21 f0       	breq	.+8      	; 0xb7c <TX_read+0x18>
		{
			USARTn.TXDATAL = 'f';
     b74:	96 e6       	ldi	r25, 0x66	; 102
     b76:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x700862>
     b7a:	03 c0       	rjmp	.+6      	; 0xb82 <TX_read+0x1e>
		} 
		else
		{
			USARTn.TXDATAL = 'a';
     b7c:	91 e6       	ldi	r25, 0x61	; 97
     b7e:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x700862>
		}
		
		prevRX_Full = RX_Full;
     b82:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <prevRX_Full>
     b86:	08 95       	ret
	} else {
	    uint8_t tail = tx_tail + 1;
     b88:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <tx_tail>
	 
	    if (tx_tail == TX_BUFFERSIZE)
     b8c:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <tx_tail>
     b90:	90 34       	cpi	r25, 0x40	; 64
     b92:	11 f0       	breq	.+4      	; 0xb98 <TX_read+0x34>
			USARTn.TXDATAL = 'a';
		}
		
		prevRX_Full = RX_Full;
	} else {
	    uint8_t tail = tx_tail + 1;
     b94:	8f 5f       	subi	r24, 0xFF	; 255
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <TX_read+0x36>
	 
	    if (tx_tail == TX_BUFFERSIZE)
		{
			tail = 0;
     b98:	80 e0       	ldi	r24, 0x00	; 0
	    }
		
		USARTn.TXDATAL = tx_buffer_data[tail];
     b9a:	e8 2f       	mov	r30, r24
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	ef 5b       	subi	r30, 0xBF	; 191
     ba0:	f6 4d       	sbci	r31, 0xD6	; 214
     ba2:	90 81       	ld	r25, Z
     ba4:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x700862>
		tx_tail = tail;
     ba8:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <tx_tail>
     bac:	08 95       	ret

00000bae <TX_available>:
	}
}

ReturnCodes TX_available(){
	
	if (RX_Full != prevRX_Full)
     bae:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <RX_Full>
     bb2:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <prevRX_Full>
     bb6:	98 13       	cpse	r25, r24
     bb8:	10 c0       	rjmp	.+32     	; 0xbda <TX_available+0x2c>
	{
		return BUFFER_AVAILABLE;
	}
	
	if (tx_head == tx_tail)
     bba:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <tx_head>
     bbe:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <tx_tail>
     bc2:	89 17       	cp	r24, r25
     bc4:	61 f0       	breq	.+24     	; 0xbde <TX_available+0x30>
	{
		return BUFFER_EMPTY;
	}
	
	uint8_t head = tx_head + 1;
     bc6:	8f 5f       	subi	r24, 0xFF	; 255
	if (head == TX_BUFFERSIZE)
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	09 f4       	brne	.+2      	; 0xbce <TX_available+0x20>
	{
		head = 0;
     bcc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	if (head == tx_tail)
     bce:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <tx_tail>
     bd2:	89 17       	cp	r24, r25
     bd4:	31 f0       	breq	.+12     	; 0xbe2 <TX_available+0x34>
	{
		return BUFFER_FULL;
	}
	return BUFFER_AVAILABLE;
     bd6:	85 e0       	ldi	r24, 0x05	; 5
     bd8:	08 95       	ret

ReturnCodes TX_available(){
	
	if (RX_Full != prevRX_Full)
	{
		return BUFFER_AVAILABLE;
     bda:	85 e0       	ldi	r24, 0x05	; 5
     bdc:	08 95       	ret
	}
	
	if (tx_head == tx_tail)
	{
		return BUFFER_EMPTY;
     bde:	86 e0       	ldi	r24, 0x06	; 6
     be0:	08 95       	ret
		head = 0;
	}
	
	if (head == tx_tail)
	{
		return BUFFER_FULL;
     be2:	84 e0       	ldi	r24, 0x04	; 4
	}
	return BUFFER_AVAILABLE;
}
     be4:	08 95       	ret

00000be6 <print>:
}


//Main loop when printing
void print(void) {
	InitParser();
     be6:	0e 94 c9 04 	call	0x992	; 0x992 <InitParser>
	TX_write('k');
     bea:	8b e6       	ldi	r24, 0x6B	; 107
     bec:	0e 94 a4 05 	call	0xb48	; 0xb48 <TX_write>
	
	PORTF.OUTSET = PIN5_bm;
     bf0:	80 e2       	ldi	r24, 0x20	; 32
     bf2:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7004a5>
	
	while(1){
		ParseStream();
		
		//Jumpstart TX if there is data and is not currently sending
		if ((TX_available() != BUFFER_EMPTY) && !(USARTn.CTRLA & USART_TXCIE_bm))
     bf6:	0f 2e       	mov	r0, r31
     bf8:	f0 e6       	ldi	r31, 0x60	; 96
     bfa:	ef 2e       	mov	r14, r31
     bfc:	f8 e0       	ldi	r31, 0x08	; 8
     bfe:	ff 2e       	mov	r15, r31
     c00:	f0 2d       	mov	r31, r0
		{
			PORTF.OUTCLR = PIN5_bm;
     c02:	00 ea       	ldi	r16, 0xA0	; 160
     c04:	14 e0       	ldi	r17, 0x04	; 4
     c06:	c0 e2       	ldi	r28, 0x20	; 32
	TX_write('k');
	
	PORTF.OUTSET = PIN5_bm;
	
	while(1){
		ParseStream();
     c08:	0e 94 38 04 	call	0x870	; 0x870 <ParseStream>
		
		//Jumpstart TX if there is data and is not currently sending
		if ((TX_available() != BUFFER_EMPTY) && !(USARTn.CTRLA & USART_TXCIE_bm))
     c0c:	0e 94 d7 05 	call	0xbae	; 0xbae <TX_available>
     c10:	86 30       	cpi	r24, 0x06	; 6
     c12:	61 f0       	breq	.+24     	; 0xc2c <print+0x46>
     c14:	f7 01       	movw	r30, r14
     c16:	85 81       	ldd	r24, Z+5	; 0x05
     c18:	86 fd       	sbrc	r24, 6
     c1a:	08 c0       	rjmp	.+16     	; 0xc2c <print+0x46>
		{
			PORTF.OUTCLR = PIN5_bm;
     c1c:	f8 01       	movw	r30, r16
     c1e:	c6 83       	std	Z+6, r28	; 0x06
			TX_read();
     c20:	0e 94 b2 05 	call	0xb64	; 0xb64 <TX_read>
			USARTn.CTRLA |= USART_TXCIE_bm;
     c24:	f7 01       	movw	r30, r14
     c26:	85 81       	ldd	r24, Z+5	; 0x05
     c28:	80 64       	ori	r24, 0x40	; 64
     c2a:	85 83       	std	Z+5, r24	; 0x05
		}
		
		PORTF.OUTSET = PIN5_bm;
     c2c:	f8 01       	movw	r30, r16
     c2e:	c5 83       	std	Z+5, r28	; 0x05
		if(ABORT){
			flushRX;
			return;
		}
		*/
	}
     c30:	eb cf       	rjmp	.-42     	; 0xc08 <print+0x22>

00000c32 <main>:

uint16_t timer = 0;

int main(void)
{
	USART_INIT(3, 9600);
     c32:	40 e8       	ldi	r20, 0x80	; 128
     c34:	55 e2       	ldi	r21, 0x25	; 37
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <USART_INIT>
	USARTn.TXDATAL = 'o';
     c40:	8f e6       	ldi	r24, 0x6F	; 111
     c42:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x700862>
	//Set clk_per prescaler not working?
//	CLKCTRL.MCLKCTRLB = (PDIV << 1)|(1 << 0);
	PORTF.DIRSET = 1 << 5;	//LED
     c46:	80 e2       	ldi	r24, 0x20	; 32
     c48:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7004a1>
	PORTC.DIRSET = 1 << MDir;
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x700441>
	PORTD.DIRSET = 1 << MStep;
     c52:	80 e1       	ldi	r24, 0x10	; 16
     c54:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x700461>
	
	sei();
     c58:	78 94       	sei
    
    while (1) 
    {
		if(RX_available() != BUFFER_EMPTY){
			PORTF.OUTTGL = PIN5_bm;
     c5a:	00 ea       	ldi	r16, 0xA0	; 160
     c5c:	14 e0       	ldi	r17, 0x04	; 4
     c5e:	c0 e2       	ldi	r28, 0x20	; 32
	
	sei();
    
    while (1) 
    {
		if(RX_available() != BUFFER_EMPTY){
     c60:	0e 94 90 05 	call	0xb20	; 0xb20 <RX_available>
     c64:	86 30       	cpi	r24, 0x06	; 6
     c66:	41 f0       	breq	.+16     	; 0xc78 <main+0x46>
			PORTF.OUTTGL = PIN5_bm;
     c68:	f8 01       	movw	r30, r16
     c6a:	c7 83       	std	Z+7, r28	; 0x07
			char tempChar = RX_read();
     c6c:	0e 94 4c 05 	call	0xa98	; 0xa98 <RX_read>
			if (tempChar == '%')
     c70:	85 32       	cpi	r24, 0x25	; 37
     c72:	11 f4       	brne	.+4      	; 0xc78 <main+0x46>
			{
				print();
     c74:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <print>
			}
		}
		
		timer++;
     c78:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <timer>
     c7c:	90 91 0f 28 	lds	r25, 0x280F	; 0x80280f <timer+0x1>
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <timer>
     c86:	90 93 0f 28 	sts	0x280F, r25	; 0x80280f <timer+0x1>
		
		if (timer == 0)
     c8a:	89 2b       	or	r24, r25
     c8c:	49 f7       	brne	.-46     	; 0xc60 <main+0x2e>
		{
			PORTF.OUTTGL = PIN5_bm;
     c8e:	f8 01       	movw	r30, r16
     c90:	c7 83       	std	Z+7, r28	; 0x07
     c92:	e6 cf       	rjmp	.-52     	; 0xc60 <main+0x2e>

00000c94 <__vector_37>:
		}
		*/
	}
}

ISR(USART3_RXC_vect){
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
	RX_write();
     cb6:	0e 94 6c 05 	call	0xad8	; 0xad8 <RX_write>
	
}
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	7f 91       	pop	r23
     cc8:	6f 91       	pop	r22
     cca:	5f 91       	pop	r21
     ccc:	4f 91       	pop	r20
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <__vector_39>:


ISR(USART3_TXC_vect){
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	2f 93       	push	r18
     ce8:	3f 93       	push	r19
     cea:	4f 93       	push	r20
     cec:	5f 93       	push	r21
     cee:	6f 93       	push	r22
     cf0:	7f 93       	push	r23
     cf2:	8f 93       	push	r24
     cf4:	9f 93       	push	r25
     cf6:	af 93       	push	r26
     cf8:	bf 93       	push	r27
     cfa:	ef 93       	push	r30
     cfc:	ff 93       	push	r31
	if (TX_available() != BUFFER_EMPTY)
     cfe:	0e 94 d7 05 	call	0xbae	; 0xbae <TX_available>
     d02:	86 30       	cpi	r24, 0x06	; 6
     d04:	19 f0       	breq	.+6      	; 0xd0c <__vector_39+0x30>
	{
		TX_read();
     d06:	0e 94 b2 05 	call	0xb64	; 0xb64 <TX_read>
     d0a:	05 c0       	rjmp	.+10     	; 0xd16 <__vector_39+0x3a>
	} else {
		//Disable interrupt if there is no data to send
		USARTn.CTRLA &= ~USART_TXCIE_bm;
     d0c:	e0 e6       	ldi	r30, 0x60	; 96
     d0e:	f8 e0       	ldi	r31, 0x08	; 8
     d10:	85 81       	ldd	r24, Z+5	; 0x05
     d12:	8f 7b       	andi	r24, 0xBF	; 191
     d14:	85 83       	std	Z+5, r24	; 0x05
	}
}
     d16:	ff 91       	pop	r31
     d18:	ef 91       	pop	r30
     d1a:	bf 91       	pop	r27
     d1c:	af 91       	pop	r26
     d1e:	9f 91       	pop	r25
     d20:	8f 91       	pop	r24
     d22:	7f 91       	pop	r23
     d24:	6f 91       	pop	r22
     d26:	5f 91       	pop	r21
     d28:	4f 91       	pop	r20
     d2a:	3f 91       	pop	r19
     d2c:	2f 91       	pop	r18
     d2e:	0f 90       	pop	r0
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	0f 90       	pop	r0
     d34:	1f 90       	pop	r1
     d36:	18 95       	reti

00000d38 <ScanWord>:
 */ 

#include <stdint.h>
#include "Header.h"

uint8_t ScanWord(const char wrd[], uint8_t startIndex, char findChar){
     d38:	9c 01       	movw	r18, r24
	for (uint8_t i = startIndex; i < MAX_WORD_SIZE; i++)
     d3a:	60 31       	cpi	r22, 0x10	; 16
     d3c:	b0 f4       	brcc	.+44     	; 0xd6a <ScanWord+0x32>
	{
		//Stop when we run out of digits
		if (wrd[i] == 0)
     d3e:	fc 01       	movw	r30, r24
     d40:	e6 0f       	add	r30, r22
     d42:	f1 1d       	adc	r31, r1
     d44:	80 81       	ld	r24, Z
     d46:	88 23       	and	r24, r24
     d48:	91 f0       	breq	.+36     	; 0xd6e <ScanWord+0x36>
		{
			return 0;
		}
		else if (wrd[i] == findChar)
     d4a:	48 13       	cpse	r20, r24
     d4c:	09 c0       	rjmp	.+18     	; 0xd60 <ScanWord+0x28>
     d4e:	11 c0       	rjmp	.+34     	; 0xd72 <ScanWord+0x3a>

uint8_t ScanWord(const char wrd[], uint8_t startIndex, char findChar){
	for (uint8_t i = startIndex; i < MAX_WORD_SIZE; i++)
	{
		//Stop when we run out of digits
		if (wrd[i] == 0)
     d50:	f9 01       	movw	r30, r18
     d52:	e6 0f       	add	r30, r22
     d54:	f1 1d       	adc	r31, r1
     d56:	90 81       	ld	r25, Z
     d58:	99 23       	and	r25, r25
     d5a:	69 f0       	breq	.+26     	; 0xd76 <ScanWord+0x3e>
		{
			return 0;
		}
		else if (wrd[i] == findChar)
     d5c:	94 17       	cp	r25, r20
     d5e:	69 f0       	breq	.+26     	; 0xd7a <ScanWord+0x42>

#include <stdint.h>
#include "Header.h"

uint8_t ScanWord(const char wrd[], uint8_t startIndex, char findChar){
	for (uint8_t i = startIndex; i < MAX_WORD_SIZE; i++)
     d60:	6f 5f       	subi	r22, 0xFF	; 255
     d62:	60 31       	cpi	r22, 0x10	; 16
     d64:	a9 f7       	brne	.-22     	; 0xd50 <ScanWord+0x18>
		else if (wrd[i] == findChar)
		{
			return i;
		}
	}
	return 0;
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	08 95       	ret
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	08 95       	ret
	for (uint8_t i = startIndex; i < MAX_WORD_SIZE; i++)
	{
		//Stop when we run out of digits
		if (wrd[i] == 0)
		{
			return 0;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	08 95       	ret

#include <stdint.h>
#include "Header.h"

uint8_t ScanWord(const char wrd[], uint8_t startIndex, char findChar){
	for (uint8_t i = startIndex; i < MAX_WORD_SIZE; i++)
     d72:	86 2f       	mov	r24, r22
     d74:	08 95       	ret
	{
		//Stop when we run out of digits
		if (wrd[i] == 0)
		{
			return 0;
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	08 95       	ret

#include <stdint.h>
#include "Header.h"

uint8_t ScanWord(const char wrd[], uint8_t startIndex, char findChar){
	for (uint8_t i = startIndex; i < MAX_WORD_SIZE; i++)
     d7a:	86 2f       	mov	r24, r22
		{
			return i;
		}
	}
	return 0;
}
     d7c:	08 95       	ret

00000d7e <Slice>:

void Slice(const char original[], char sliced[], uint8_t startIndex, uint8_t stopIndex){
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	ec 01       	movw	r28, r24
	int8_t length = stopIndex - startIndex + 1;
     d84:	24 1b       	sub	r18, r20
     d86:	2f 5f       	subi	r18, 0xFF	; 255
     d88:	fb 01       	movw	r30, r22
     d8a:	db 01       	movw	r26, r22
     d8c:	50 96       	adiw	r26, 0x10	; 16
	
	//Clear sliced buffer
	for (uint8_t i = 0; i < MAX_WORD_SIZE; i++)
	{
		sliced[i] = 0;
     d8e:	11 92       	st	Z+, r1

void Slice(const char original[], char sliced[], uint8_t startIndex, uint8_t stopIndex){
	int8_t length = stopIndex - startIndex + 1;
	
	//Clear sliced buffer
	for (uint8_t i = 0; i < MAX_WORD_SIZE; i++)
     d90:	ea 17       	cp	r30, r26
     d92:	fb 07       	cpc	r31, r27
     d94:	e1 f7       	brne	.-8      	; 0xd8e <Slice+0x10>
	{
		sliced[i] = 0;
	}

	//Nothing to slice
	if(length < 1){
     d96:	12 16       	cp	r1, r18
     d98:	cc f4       	brge	.+50     	; 0xdcc <Slice+0x4e>
		return;
	}
	
	
	for(uint8_t i = 0; i < length; i++){
     d9a:	02 2e       	mov	r0, r18
     d9c:	00 0c       	add	r0, r0
     d9e:	33 0b       	sbc	r19, r19
     da0:	12 16       	cp	r1, r18
     da2:	13 06       	cpc	r1, r19
     da4:	9c f4       	brge	.+38     	; 0xdcc <Slice+0x4e>
     da6:	e0 e0       	ldi	r30, 0x00	; 0
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
		sliced[i] = original[startIndex + i];
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	ec 0f       	add	r30, r28
     db0:	fd 1f       	adc	r31, r29
     db2:	e4 0f       	add	r30, r20
     db4:	f5 1f       	adc	r31, r21
     db6:	80 81       	ld	r24, Z
     db8:	fb 01       	movw	r30, r22
     dba:	e9 0f       	add	r30, r25
     dbc:	f1 1d       	adc	r31, r1
     dbe:	80 83       	st	Z, r24
	if(length < 1){
		return;
	}
	
	
	for(uint8_t i = 0; i < length; i++){
     dc0:	9f 5f       	subi	r25, 0xFF	; 255
     dc2:	e9 2f       	mov	r30, r25
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	e2 17       	cp	r30, r18
     dc8:	f3 07       	cpc	r31, r19
     dca:	8c f3       	brlt	.-30     	; 0xdae <Slice+0x30>
		sliced[i] = original[startIndex + i];
	}
}
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <StringLength>:

uint8_t StringLength(const char strng[], uint8_t startIndex){
     dd2:	9c 01       	movw	r18, r24
	uint8_t counter = 0;
	
	for (uint8_t i = startIndex; i < MAX_WORD_SIZE; i++)
     dd4:	60 31       	cpi	r22, 0x10	; 16
     dd6:	98 f4       	brcc	.+38     	; 0xdfe <StringLength+0x2c>
	{
		if (strng[i] == 0)
     dd8:	fc 01       	movw	r30, r24
     dda:	e6 0f       	add	r30, r22
     ddc:	f1 1d       	adc	r31, r1
     dde:	80 81       	ld	r24, Z
     de0:	88 23       	and	r24, r24
     de2:	79 f0       	breq	.+30     	; 0xe02 <StringLength+0x30>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <StringLength+0x22>
     de8:	f9 01       	movw	r30, r18
     dea:	e6 0f       	add	r30, r22
     dec:	f1 1d       	adc	r31, r1
     dee:	90 81       	ld	r25, Z
     df0:	99 23       	and	r25, r25
     df2:	41 f0       	breq	.+16     	; 0xe04 <StringLength+0x32>
		{
			return counter;
		} else {
			counter++;
     df4:	8f 5f       	subi	r24, 0xFF	; 255
}

uint8_t StringLength(const char strng[], uint8_t startIndex){
	uint8_t counter = 0;
	
	for (uint8_t i = startIndex; i < MAX_WORD_SIZE; i++)
     df6:	6f 5f       	subi	r22, 0xFF	; 255
     df8:	60 31       	cpi	r22, 0x10	; 16
     dfa:	b1 f7       	brne	.-20     	; 0xde8 <StringLength+0x16>
     dfc:	08 95       	ret
		sliced[i] = original[startIndex + i];
	}
}

uint8_t StringLength(const char strng[], uint8_t startIndex){
	uint8_t counter = 0;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	08 95       	ret
     e02:	80 e0       	ldi	r24, 0x00	; 0
		} else {
			counter++;
		}
	}
	return counter;
}
     e04:	08 95       	ret

00000e06 <Metric2Step>:

StepCount Metric2Step(float millimeters){
     e06:	8f 92       	push	r8
     e08:	9f 92       	push	r9
     e0a:	af 92       	push	r10
     e0c:	bf 92       	push	r11
     e0e:	cf 92       	push	r12
     e10:	df 92       	push	r13
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
	StepCount newStep;
	float tempLength = millimeters / METRIC_STEP_LENGTH;
     e16:	28 ed       	ldi	r18, 0xD8	; 216
     e18:	30 ef       	ldi	r19, 0xF0	; 240
     e1a:	44 e7       	ldi	r20, 0x74	; 116
     e1c:	5c e3       	ldi	r21, 0x3C	; 60
     e1e:	0e 94 a8 07 	call	0xf50	; 0xf50 <__divsf3>
     e22:	4b 01       	movw	r8, r22
     e24:	5c 01       	movw	r10, r24
	newStep.full = floor(tempLength);
     e26:	0e 94 8d 08 	call	0x111a	; 0x111a <floor>
     e2a:	0e 94 1a 08 	call	0x1034	; 0x1034 <__fixsfsi>
     e2e:	6b 01       	movw	r12, r22
     e30:	7c 01       	movw	r14, r24
	tempLength -= newStep.full;
	newStep.micro = round(tempLength * 16);
     e32:	07 2e       	mov	r0, r23
     e34:	00 0c       	add	r0, r0
     e36:	88 0b       	sbc	r24, r24
     e38:	99 0b       	sbc	r25, r25
     e3a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
     e3e:	9b 01       	movw	r18, r22
     e40:	ac 01       	movw	r20, r24
     e42:	c5 01       	movw	r24, r10
     e44:	b4 01       	movw	r22, r8
     e46:	0e 94 3b 07 	call	0xe76	; 0xe76 <__subsf3>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	40 e8       	ldi	r20, 0x80	; 128
     e50:	51 e4       	ldi	r21, 0x41	; 65
     e52:	0e 94 36 09 	call	0x126c	; 0x126c <__mulsf3>
     e56:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <round>
	return newStep;
     e5a:	0e 94 1a 08 	call	0x1034	; 0x1034 <__fixsfsi>
     e5e:	86 2f       	mov	r24, r22
}
     e60:	6c 2d       	mov	r22, r12
     e62:	7d 2d       	mov	r23, r13
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	9f 90       	pop	r9
     e72:	8f 90       	pop	r8
     e74:	08 95       	ret

00000e76 <__subsf3>:
     e76:	50 58       	subi	r21, 0x80	; 128

00000e78 <__addsf3>:
     e78:	bb 27       	eor	r27, r27
     e7a:	aa 27       	eor	r26, r26
     e7c:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3x>
     e80:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_round>
     e84:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_pscA>
     e88:	38 f0       	brcs	.+14     	; 0xe98 <__addsf3+0x20>
     e8a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_pscB>
     e8e:	20 f0       	brcs	.+8      	; 0xe98 <__addsf3+0x20>
     e90:	39 f4       	brne	.+14     	; 0xea0 <__addsf3+0x28>
     e92:	9f 3f       	cpi	r25, 0xFF	; 255
     e94:	19 f4       	brne	.+6      	; 0xe9c <__addsf3+0x24>
     e96:	26 f4       	brtc	.+8      	; 0xea0 <__addsf3+0x28>
     e98:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_nan>
     e9c:	0e f4       	brtc	.+2      	; 0xea0 <__addsf3+0x28>
     e9e:	e0 95       	com	r30
     ea0:	e7 fb       	bst	r30, 7
     ea2:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_inf>

00000ea6 <__addsf3x>:
     ea6:	e9 2f       	mov	r30, r25
     ea8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_split3>
     eac:	58 f3       	brcs	.-42     	; 0xe84 <__addsf3+0xc>
     eae:	ba 17       	cp	r27, r26
     eb0:	62 07       	cpc	r22, r18
     eb2:	73 07       	cpc	r23, r19
     eb4:	84 07       	cpc	r24, r20
     eb6:	95 07       	cpc	r25, r21
     eb8:	20 f0       	brcs	.+8      	; 0xec2 <__addsf3x+0x1c>
     eba:	79 f4       	brne	.+30     	; 0xeda <__addsf3x+0x34>
     ebc:	a6 f5       	brtc	.+104    	; 0xf26 <__addsf3x+0x80>
     ebe:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_zero>
     ec2:	0e f4       	brtc	.+2      	; 0xec6 <__addsf3x+0x20>
     ec4:	e0 95       	com	r30
     ec6:	0b 2e       	mov	r0, r27
     ec8:	ba 2f       	mov	r27, r26
     eca:	a0 2d       	mov	r26, r0
     ecc:	0b 01       	movw	r0, r22
     ece:	b9 01       	movw	r22, r18
     ed0:	90 01       	movw	r18, r0
     ed2:	0c 01       	movw	r0, r24
     ed4:	ca 01       	movw	r24, r20
     ed6:	a0 01       	movw	r20, r0
     ed8:	11 24       	eor	r1, r1
     eda:	ff 27       	eor	r31, r31
     edc:	59 1b       	sub	r21, r25
     ede:	99 f0       	breq	.+38     	; 0xf06 <__addsf3x+0x60>
     ee0:	59 3f       	cpi	r21, 0xF9	; 249
     ee2:	50 f4       	brcc	.+20     	; 0xef8 <__addsf3x+0x52>
     ee4:	50 3e       	cpi	r21, 0xE0	; 224
     ee6:	68 f1       	brcs	.+90     	; 0xf42 <__addsf3x+0x9c>
     ee8:	1a 16       	cp	r1, r26
     eea:	f0 40       	sbci	r31, 0x00	; 0
     eec:	a2 2f       	mov	r26, r18
     eee:	23 2f       	mov	r18, r19
     ef0:	34 2f       	mov	r19, r20
     ef2:	44 27       	eor	r20, r20
     ef4:	58 5f       	subi	r21, 0xF8	; 248
     ef6:	f3 cf       	rjmp	.-26     	; 0xede <__addsf3x+0x38>
     ef8:	46 95       	lsr	r20
     efa:	37 95       	ror	r19
     efc:	27 95       	ror	r18
     efe:	a7 95       	ror	r26
     f00:	f0 40       	sbci	r31, 0x00	; 0
     f02:	53 95       	inc	r21
     f04:	c9 f7       	brne	.-14     	; 0xef8 <__addsf3x+0x52>
     f06:	7e f4       	brtc	.+30     	; 0xf26 <__addsf3x+0x80>
     f08:	1f 16       	cp	r1, r31
     f0a:	ba 0b       	sbc	r27, r26
     f0c:	62 0b       	sbc	r22, r18
     f0e:	73 0b       	sbc	r23, r19
     f10:	84 0b       	sbc	r24, r20
     f12:	ba f0       	brmi	.+46     	; 0xf42 <__addsf3x+0x9c>
     f14:	91 50       	subi	r25, 0x01	; 1
     f16:	a1 f0       	breq	.+40     	; 0xf40 <__addsf3x+0x9a>
     f18:	ff 0f       	add	r31, r31
     f1a:	bb 1f       	adc	r27, r27
     f1c:	66 1f       	adc	r22, r22
     f1e:	77 1f       	adc	r23, r23
     f20:	88 1f       	adc	r24, r24
     f22:	c2 f7       	brpl	.-16     	; 0xf14 <__addsf3x+0x6e>
     f24:	0e c0       	rjmp	.+28     	; 0xf42 <__addsf3x+0x9c>
     f26:	ba 0f       	add	r27, r26
     f28:	62 1f       	adc	r22, r18
     f2a:	73 1f       	adc	r23, r19
     f2c:	84 1f       	adc	r24, r20
     f2e:	48 f4       	brcc	.+18     	; 0xf42 <__addsf3x+0x9c>
     f30:	87 95       	ror	r24
     f32:	77 95       	ror	r23
     f34:	67 95       	ror	r22
     f36:	b7 95       	ror	r27
     f38:	f7 95       	ror	r31
     f3a:	9e 3f       	cpi	r25, 0xFE	; 254
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <__addsf3x+0x9a>
     f3e:	b0 cf       	rjmp	.-160    	; 0xea0 <__addsf3+0x28>
     f40:	93 95       	inc	r25
     f42:	88 0f       	add	r24, r24
     f44:	08 f0       	brcs	.+2      	; 0xf48 <__addsf3x+0xa2>
     f46:	99 27       	eor	r25, r25
     f48:	ee 0f       	add	r30, r30
     f4a:	97 95       	ror	r25
     f4c:	87 95       	ror	r24
     f4e:	08 95       	ret

00000f50 <__divsf3>:
     f50:	0e 94 bc 07 	call	0xf78	; 0xf78 <__divsf3x>
     f54:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_round>
     f58:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_pscB>
     f5c:	58 f0       	brcs	.+22     	; 0xf74 <__divsf3+0x24>
     f5e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_pscA>
     f62:	40 f0       	brcs	.+16     	; 0xf74 <__divsf3+0x24>
     f64:	29 f4       	brne	.+10     	; 0xf70 <__divsf3+0x20>
     f66:	5f 3f       	cpi	r21, 0xFF	; 255
     f68:	29 f0       	breq	.+10     	; 0xf74 <__divsf3+0x24>
     f6a:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_inf>
     f6e:	51 11       	cpse	r21, r1
     f70:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_szero>
     f74:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_nan>

00000f78 <__divsf3x>:
     f78:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_split3>
     f7c:	68 f3       	brcs	.-38     	; 0xf58 <__divsf3+0x8>

00000f7e <__divsf3_pse>:
     f7e:	99 23       	and	r25, r25
     f80:	b1 f3       	breq	.-20     	; 0xf6e <__divsf3+0x1e>
     f82:	55 23       	and	r21, r21
     f84:	91 f3       	breq	.-28     	; 0xf6a <__divsf3+0x1a>
     f86:	95 1b       	sub	r25, r21
     f88:	55 0b       	sbc	r21, r21
     f8a:	bb 27       	eor	r27, r27
     f8c:	aa 27       	eor	r26, r26
     f8e:	62 17       	cp	r22, r18
     f90:	73 07       	cpc	r23, r19
     f92:	84 07       	cpc	r24, r20
     f94:	38 f0       	brcs	.+14     	; 0xfa4 <__divsf3_pse+0x26>
     f96:	9f 5f       	subi	r25, 0xFF	; 255
     f98:	5f 4f       	sbci	r21, 0xFF	; 255
     f9a:	22 0f       	add	r18, r18
     f9c:	33 1f       	adc	r19, r19
     f9e:	44 1f       	adc	r20, r20
     fa0:	aa 1f       	adc	r26, r26
     fa2:	a9 f3       	breq	.-22     	; 0xf8e <__divsf3_pse+0x10>
     fa4:	35 d0       	rcall	.+106    	; 0x1010 <__divsf3_pse+0x92>
     fa6:	0e 2e       	mov	r0, r30
     fa8:	3a f0       	brmi	.+14     	; 0xfb8 <__divsf3_pse+0x3a>
     faa:	e0 e8       	ldi	r30, 0x80	; 128
     fac:	32 d0       	rcall	.+100    	; 0x1012 <__divsf3_pse+0x94>
     fae:	91 50       	subi	r25, 0x01	; 1
     fb0:	50 40       	sbci	r21, 0x00	; 0
     fb2:	e6 95       	lsr	r30
     fb4:	00 1c       	adc	r0, r0
     fb6:	ca f7       	brpl	.-14     	; 0xfaa <__divsf3_pse+0x2c>
     fb8:	2b d0       	rcall	.+86     	; 0x1010 <__divsf3_pse+0x92>
     fba:	fe 2f       	mov	r31, r30
     fbc:	29 d0       	rcall	.+82     	; 0x1010 <__divsf3_pse+0x92>
     fbe:	66 0f       	add	r22, r22
     fc0:	77 1f       	adc	r23, r23
     fc2:	88 1f       	adc	r24, r24
     fc4:	bb 1f       	adc	r27, r27
     fc6:	26 17       	cp	r18, r22
     fc8:	37 07       	cpc	r19, r23
     fca:	48 07       	cpc	r20, r24
     fcc:	ab 07       	cpc	r26, r27
     fce:	b0 e8       	ldi	r27, 0x80	; 128
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <__divsf3_pse+0x56>
     fd2:	bb 0b       	sbc	r27, r27
     fd4:	80 2d       	mov	r24, r0
     fd6:	bf 01       	movw	r22, r30
     fd8:	ff 27       	eor	r31, r31
     fda:	93 58       	subi	r25, 0x83	; 131
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	3a f0       	brmi	.+14     	; 0xfee <__divsf3_pse+0x70>
     fe0:	9e 3f       	cpi	r25, 0xFE	; 254
     fe2:	51 05       	cpc	r21, r1
     fe4:	78 f0       	brcs	.+30     	; 0x1004 <__divsf3_pse+0x86>
     fe6:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_inf>
     fea:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_szero>
     fee:	5f 3f       	cpi	r21, 0xFF	; 255
     ff0:	e4 f3       	brlt	.-8      	; 0xfea <__divsf3_pse+0x6c>
     ff2:	98 3e       	cpi	r25, 0xE8	; 232
     ff4:	d4 f3       	brlt	.-12     	; 0xfea <__divsf3_pse+0x6c>
     ff6:	86 95       	lsr	r24
     ff8:	77 95       	ror	r23
     ffa:	67 95       	ror	r22
     ffc:	b7 95       	ror	r27
     ffe:	f7 95       	ror	r31
    1000:	9f 5f       	subi	r25, 0xFF	; 255
    1002:	c9 f7       	brne	.-14     	; 0xff6 <__divsf3_pse+0x78>
    1004:	88 0f       	add	r24, r24
    1006:	91 1d       	adc	r25, r1
    1008:	96 95       	lsr	r25
    100a:	87 95       	ror	r24
    100c:	97 f9       	bld	r25, 7
    100e:	08 95       	ret
    1010:	e1 e0       	ldi	r30, 0x01	; 1
    1012:	66 0f       	add	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	bb 1f       	adc	r27, r27
    101a:	62 17       	cp	r22, r18
    101c:	73 07       	cpc	r23, r19
    101e:	84 07       	cpc	r24, r20
    1020:	ba 07       	cpc	r27, r26
    1022:	20 f0       	brcs	.+8      	; 0x102c <__divsf3_pse+0xae>
    1024:	62 1b       	sub	r22, r18
    1026:	73 0b       	sbc	r23, r19
    1028:	84 0b       	sbc	r24, r20
    102a:	ba 0b       	sbc	r27, r26
    102c:	ee 1f       	adc	r30, r30
    102e:	88 f7       	brcc	.-30     	; 0x1012 <__divsf3_pse+0x94>
    1030:	e0 95       	com	r30
    1032:	08 95       	ret

00001034 <__fixsfsi>:
    1034:	0e 94 21 08 	call	0x1042	; 0x1042 <__fixunssfsi>
    1038:	68 94       	set
    103a:	b1 11       	cpse	r27, r1
    103c:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_szero>
    1040:	08 95       	ret

00001042 <__fixunssfsi>:
    1042:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_splitA>
    1046:	88 f0       	brcs	.+34     	; 0x106a <__fixunssfsi+0x28>
    1048:	9f 57       	subi	r25, 0x7F	; 127
    104a:	98 f0       	brcs	.+38     	; 0x1072 <__fixunssfsi+0x30>
    104c:	b9 2f       	mov	r27, r25
    104e:	99 27       	eor	r25, r25
    1050:	b7 51       	subi	r27, 0x17	; 23
    1052:	b0 f0       	brcs	.+44     	; 0x1080 <__fixunssfsi+0x3e>
    1054:	e1 f0       	breq	.+56     	; 0x108e <__fixunssfsi+0x4c>
    1056:	66 0f       	add	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	88 1f       	adc	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	1a f0       	brmi	.+6      	; 0x1066 <__fixunssfsi+0x24>
    1060:	ba 95       	dec	r27
    1062:	c9 f7       	brne	.-14     	; 0x1056 <__fixunssfsi+0x14>
    1064:	14 c0       	rjmp	.+40     	; 0x108e <__fixunssfsi+0x4c>
    1066:	b1 30       	cpi	r27, 0x01	; 1
    1068:	91 f0       	breq	.+36     	; 0x108e <__fixunssfsi+0x4c>
    106a:	0e 94 2f 09 	call	0x125e	; 0x125e <__fp_zero>
    106e:	b1 e0       	ldi	r27, 0x01	; 1
    1070:	08 95       	ret
    1072:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_zero>
    1076:	67 2f       	mov	r22, r23
    1078:	78 2f       	mov	r23, r24
    107a:	88 27       	eor	r24, r24
    107c:	b8 5f       	subi	r27, 0xF8	; 248
    107e:	39 f0       	breq	.+14     	; 0x108e <__fixunssfsi+0x4c>
    1080:	b9 3f       	cpi	r27, 0xF9	; 249
    1082:	cc f3       	brlt	.-14     	; 0x1076 <__fixunssfsi+0x34>
    1084:	86 95       	lsr	r24
    1086:	77 95       	ror	r23
    1088:	67 95       	ror	r22
    108a:	b3 95       	inc	r27
    108c:	d9 f7       	brne	.-10     	; 0x1084 <__fixunssfsi+0x42>
    108e:	3e f4       	brtc	.+14     	; 0x109e <__fixunssfsi+0x5c>
    1090:	90 95       	com	r25
    1092:	80 95       	com	r24
    1094:	70 95       	com	r23
    1096:	61 95       	neg	r22
    1098:	7f 4f       	sbci	r23, 0xFF	; 255
    109a:	8f 4f       	sbci	r24, 0xFF	; 255
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	08 95       	ret

000010a0 <__floatunsisf>:
    10a0:	e8 94       	clt
    10a2:	09 c0       	rjmp	.+18     	; 0x10b6 <__floatsisf+0x12>

000010a4 <__floatsisf>:
    10a4:	97 fb       	bst	r25, 7
    10a6:	3e f4       	brtc	.+14     	; 0x10b6 <__floatsisf+0x12>
    10a8:	90 95       	com	r25
    10aa:	80 95       	com	r24
    10ac:	70 95       	com	r23
    10ae:	61 95       	neg	r22
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	8f 4f       	sbci	r24, 0xFF	; 255
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	99 23       	and	r25, r25
    10b8:	a9 f0       	breq	.+42     	; 0x10e4 <__floatsisf+0x40>
    10ba:	f9 2f       	mov	r31, r25
    10bc:	96 e9       	ldi	r25, 0x96	; 150
    10be:	bb 27       	eor	r27, r27
    10c0:	93 95       	inc	r25
    10c2:	f6 95       	lsr	r31
    10c4:	87 95       	ror	r24
    10c6:	77 95       	ror	r23
    10c8:	67 95       	ror	r22
    10ca:	b7 95       	ror	r27
    10cc:	f1 11       	cpse	r31, r1
    10ce:	f8 cf       	rjmp	.-16     	; 0x10c0 <__floatsisf+0x1c>
    10d0:	fa f4       	brpl	.+62     	; 0x1110 <__floatsisf+0x6c>
    10d2:	bb 0f       	add	r27, r27
    10d4:	11 f4       	brne	.+4      	; 0x10da <__floatsisf+0x36>
    10d6:	60 ff       	sbrs	r22, 0
    10d8:	1b c0       	rjmp	.+54     	; 0x1110 <__floatsisf+0x6c>
    10da:	6f 5f       	subi	r22, 0xFF	; 255
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	8f 4f       	sbci	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	16 c0       	rjmp	.+44     	; 0x1110 <__floatsisf+0x6c>
    10e4:	88 23       	and	r24, r24
    10e6:	11 f0       	breq	.+4      	; 0x10ec <__floatsisf+0x48>
    10e8:	96 e9       	ldi	r25, 0x96	; 150
    10ea:	11 c0       	rjmp	.+34     	; 0x110e <__floatsisf+0x6a>
    10ec:	77 23       	and	r23, r23
    10ee:	21 f0       	breq	.+8      	; 0x10f8 <__floatsisf+0x54>
    10f0:	9e e8       	ldi	r25, 0x8E	; 142
    10f2:	87 2f       	mov	r24, r23
    10f4:	76 2f       	mov	r23, r22
    10f6:	05 c0       	rjmp	.+10     	; 0x1102 <__floatsisf+0x5e>
    10f8:	66 23       	and	r22, r22
    10fa:	71 f0       	breq	.+28     	; 0x1118 <__floatsisf+0x74>
    10fc:	96 e8       	ldi	r25, 0x86	; 134
    10fe:	86 2f       	mov	r24, r22
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	2a f0       	brmi	.+10     	; 0x1110 <__floatsisf+0x6c>
    1106:	9a 95       	dec	r25
    1108:	66 0f       	add	r22, r22
    110a:	77 1f       	adc	r23, r23
    110c:	88 1f       	adc	r24, r24
    110e:	da f7       	brpl	.-10     	; 0x1106 <__floatsisf+0x62>
    1110:	88 0f       	add	r24, r24
    1112:	96 95       	lsr	r25
    1114:	87 95       	ror	r24
    1116:	97 f9       	bld	r25, 7
    1118:	08 95       	ret

0000111a <floor>:
    111a:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_trunc>
    111e:	90 f0       	brcs	.+36     	; 0x1144 <floor+0x2a>
    1120:	9f 37       	cpi	r25, 0x7F	; 127
    1122:	48 f4       	brcc	.+18     	; 0x1136 <floor+0x1c>
    1124:	91 11       	cpse	r25, r1
    1126:	16 f0       	brts	.+4      	; 0x112c <floor+0x12>
    1128:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_szero>
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	80 e8       	ldi	r24, 0x80	; 128
    1132:	9f eb       	ldi	r25, 0xBF	; 191
    1134:	08 95       	ret
    1136:	26 f4       	brtc	.+8      	; 0x1140 <floor+0x26>
    1138:	1b 16       	cp	r1, r27
    113a:	61 1d       	adc	r22, r1
    113c:	71 1d       	adc	r23, r1
    113e:	81 1d       	adc	r24, r1
    1140:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_mintl>
    1144:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__fp_mpack>

00001148 <__fp_inf>:
    1148:	97 f9       	bld	r25, 7
    114a:	9f 67       	ori	r25, 0x7F	; 127
    114c:	80 e8       	ldi	r24, 0x80	; 128
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	08 95       	ret

00001154 <__fp_mintl>:
    1154:	88 23       	and	r24, r24
    1156:	71 f4       	brne	.+28     	; 0x1174 <__fp_mintl+0x20>
    1158:	77 23       	and	r23, r23
    115a:	21 f0       	breq	.+8      	; 0x1164 <__fp_mintl+0x10>
    115c:	98 50       	subi	r25, 0x08	; 8
    115e:	87 2b       	or	r24, r23
    1160:	76 2f       	mov	r23, r22
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <__fp_mintl+0x1e>
    1164:	66 23       	and	r22, r22
    1166:	11 f4       	brne	.+4      	; 0x116c <__fp_mintl+0x18>
    1168:	99 27       	eor	r25, r25
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <__fp_mintl+0x32>
    116c:	90 51       	subi	r25, 0x10	; 16
    116e:	86 2b       	or	r24, r22
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	2a f0       	brmi	.+10     	; 0x1180 <__fp_mintl+0x2c>
    1176:	9a 95       	dec	r25
    1178:	66 0f       	add	r22, r22
    117a:	77 1f       	adc	r23, r23
    117c:	88 1f       	adc	r24, r24
    117e:	da f7       	brpl	.-10     	; 0x1176 <__fp_mintl+0x22>
    1180:	88 0f       	add	r24, r24
    1182:	96 95       	lsr	r25
    1184:	87 95       	ror	r24
    1186:	97 f9       	bld	r25, 7
    1188:	08 95       	ret

0000118a <__fp_mpack>:
    118a:	9f 3f       	cpi	r25, 0xFF	; 255
    118c:	31 f0       	breq	.+12     	; 0x119a <__fp_mpack_finite+0xc>

0000118e <__fp_mpack_finite>:
    118e:	91 50       	subi	r25, 0x01	; 1
    1190:	20 f4       	brcc	.+8      	; 0x119a <__fp_mpack_finite+0xc>
    1192:	87 95       	ror	r24
    1194:	77 95       	ror	r23
    1196:	67 95       	ror	r22
    1198:	b7 95       	ror	r27
    119a:	88 0f       	add	r24, r24
    119c:	91 1d       	adc	r25, r1
    119e:	96 95       	lsr	r25
    11a0:	87 95       	ror	r24
    11a2:	97 f9       	bld	r25, 7
    11a4:	08 95       	ret

000011a6 <__fp_nan>:
    11a6:	9f ef       	ldi	r25, 0xFF	; 255
    11a8:	80 ec       	ldi	r24, 0xC0	; 192
    11aa:	08 95       	ret

000011ac <__fp_pscA>:
    11ac:	00 24       	eor	r0, r0
    11ae:	0a 94       	dec	r0
    11b0:	16 16       	cp	r1, r22
    11b2:	17 06       	cpc	r1, r23
    11b4:	18 06       	cpc	r1, r24
    11b6:	09 06       	cpc	r0, r25
    11b8:	08 95       	ret

000011ba <__fp_pscB>:
    11ba:	00 24       	eor	r0, r0
    11bc:	0a 94       	dec	r0
    11be:	12 16       	cp	r1, r18
    11c0:	13 06       	cpc	r1, r19
    11c2:	14 06       	cpc	r1, r20
    11c4:	05 06       	cpc	r0, r21
    11c6:	08 95       	ret

000011c8 <__fp_round>:
    11c8:	09 2e       	mov	r0, r25
    11ca:	03 94       	inc	r0
    11cc:	00 0c       	add	r0, r0
    11ce:	11 f4       	brne	.+4      	; 0x11d4 <__fp_round+0xc>
    11d0:	88 23       	and	r24, r24
    11d2:	52 f0       	brmi	.+20     	; 0x11e8 <__fp_round+0x20>
    11d4:	bb 0f       	add	r27, r27
    11d6:	40 f4       	brcc	.+16     	; 0x11e8 <__fp_round+0x20>
    11d8:	bf 2b       	or	r27, r31
    11da:	11 f4       	brne	.+4      	; 0x11e0 <__fp_round+0x18>
    11dc:	60 ff       	sbrs	r22, 0
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <__fp_round+0x20>
    11e0:	6f 5f       	subi	r22, 0xFF	; 255
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255
    11e4:	8f 4f       	sbci	r24, 0xFF	; 255
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	08 95       	ret

000011ea <__fp_split3>:
    11ea:	57 fd       	sbrc	r21, 7
    11ec:	90 58       	subi	r25, 0x80	; 128
    11ee:	44 0f       	add	r20, r20
    11f0:	55 1f       	adc	r21, r21
    11f2:	59 f0       	breq	.+22     	; 0x120a <__fp_splitA+0x10>
    11f4:	5f 3f       	cpi	r21, 0xFF	; 255
    11f6:	71 f0       	breq	.+28     	; 0x1214 <__fp_splitA+0x1a>
    11f8:	47 95       	ror	r20

000011fa <__fp_splitA>:
    11fa:	88 0f       	add	r24, r24
    11fc:	97 fb       	bst	r25, 7
    11fe:	99 1f       	adc	r25, r25
    1200:	61 f0       	breq	.+24     	; 0x121a <__fp_splitA+0x20>
    1202:	9f 3f       	cpi	r25, 0xFF	; 255
    1204:	79 f0       	breq	.+30     	; 0x1224 <__fp_splitA+0x2a>
    1206:	87 95       	ror	r24
    1208:	08 95       	ret
    120a:	12 16       	cp	r1, r18
    120c:	13 06       	cpc	r1, r19
    120e:	14 06       	cpc	r1, r20
    1210:	55 1f       	adc	r21, r21
    1212:	f2 cf       	rjmp	.-28     	; 0x11f8 <__fp_split3+0xe>
    1214:	46 95       	lsr	r20
    1216:	f1 df       	rcall	.-30     	; 0x11fa <__fp_splitA>
    1218:	08 c0       	rjmp	.+16     	; 0x122a <__fp_splitA+0x30>
    121a:	16 16       	cp	r1, r22
    121c:	17 06       	cpc	r1, r23
    121e:	18 06       	cpc	r1, r24
    1220:	99 1f       	adc	r25, r25
    1222:	f1 cf       	rjmp	.-30     	; 0x1206 <__fp_splitA+0xc>
    1224:	86 95       	lsr	r24
    1226:	71 05       	cpc	r23, r1
    1228:	61 05       	cpc	r22, r1
    122a:	08 94       	sec
    122c:	08 95       	ret

0000122e <__fp_trunc>:
    122e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_splitA>
    1232:	a0 f0       	brcs	.+40     	; 0x125c <__fp_trunc+0x2e>
    1234:	be e7       	ldi	r27, 0x7E	; 126
    1236:	b9 17       	cp	r27, r25
    1238:	88 f4       	brcc	.+34     	; 0x125c <__fp_trunc+0x2e>
    123a:	bb 27       	eor	r27, r27
    123c:	9f 38       	cpi	r25, 0x8F	; 143
    123e:	60 f4       	brcc	.+24     	; 0x1258 <__fp_trunc+0x2a>
    1240:	16 16       	cp	r1, r22
    1242:	b1 1d       	adc	r27, r1
    1244:	67 2f       	mov	r22, r23
    1246:	78 2f       	mov	r23, r24
    1248:	88 27       	eor	r24, r24
    124a:	98 5f       	subi	r25, 0xF8	; 248
    124c:	f7 cf       	rjmp	.-18     	; 0x123c <__fp_trunc+0xe>
    124e:	86 95       	lsr	r24
    1250:	77 95       	ror	r23
    1252:	67 95       	ror	r22
    1254:	b1 1d       	adc	r27, r1
    1256:	93 95       	inc	r25
    1258:	96 39       	cpi	r25, 0x96	; 150
    125a:	c8 f3       	brcs	.-14     	; 0x124e <__fp_trunc+0x20>
    125c:	08 95       	ret

0000125e <__fp_zero>:
    125e:	e8 94       	clt

00001260 <__fp_szero>:
    1260:	bb 27       	eor	r27, r27
    1262:	66 27       	eor	r22, r22
    1264:	77 27       	eor	r23, r23
    1266:	cb 01       	movw	r24, r22
    1268:	97 f9       	bld	r25, 7
    126a:	08 95       	ret

0000126c <__mulsf3>:
    126c:	0e 94 49 09 	call	0x1292	; 0x1292 <__mulsf3x>
    1270:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_round>
    1274:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_pscA>
    1278:	38 f0       	brcs	.+14     	; 0x1288 <__mulsf3+0x1c>
    127a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_pscB>
    127e:	20 f0       	brcs	.+8      	; 0x1288 <__mulsf3+0x1c>
    1280:	95 23       	and	r25, r21
    1282:	11 f0       	breq	.+4      	; 0x1288 <__mulsf3+0x1c>
    1284:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_inf>
    1288:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_nan>
    128c:	11 24       	eor	r1, r1
    128e:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_szero>

00001292 <__mulsf3x>:
    1292:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_split3>
    1296:	70 f3       	brcs	.-36     	; 0x1274 <__mulsf3+0x8>

00001298 <__mulsf3_pse>:
    1298:	95 9f       	mul	r25, r21
    129a:	c1 f3       	breq	.-16     	; 0x128c <__mulsf3+0x20>
    129c:	95 0f       	add	r25, r21
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	55 1f       	adc	r21, r21
    12a2:	62 9f       	mul	r22, r18
    12a4:	f0 01       	movw	r30, r0
    12a6:	72 9f       	mul	r23, r18
    12a8:	bb 27       	eor	r27, r27
    12aa:	f0 0d       	add	r31, r0
    12ac:	b1 1d       	adc	r27, r1
    12ae:	63 9f       	mul	r22, r19
    12b0:	aa 27       	eor	r26, r26
    12b2:	f0 0d       	add	r31, r0
    12b4:	b1 1d       	adc	r27, r1
    12b6:	aa 1f       	adc	r26, r26
    12b8:	64 9f       	mul	r22, r20
    12ba:	66 27       	eor	r22, r22
    12bc:	b0 0d       	add	r27, r0
    12be:	a1 1d       	adc	r26, r1
    12c0:	66 1f       	adc	r22, r22
    12c2:	82 9f       	mul	r24, r18
    12c4:	22 27       	eor	r18, r18
    12c6:	b0 0d       	add	r27, r0
    12c8:	a1 1d       	adc	r26, r1
    12ca:	62 1f       	adc	r22, r18
    12cc:	73 9f       	mul	r23, r19
    12ce:	b0 0d       	add	r27, r0
    12d0:	a1 1d       	adc	r26, r1
    12d2:	62 1f       	adc	r22, r18
    12d4:	83 9f       	mul	r24, r19
    12d6:	a0 0d       	add	r26, r0
    12d8:	61 1d       	adc	r22, r1
    12da:	22 1f       	adc	r18, r18
    12dc:	74 9f       	mul	r23, r20
    12de:	33 27       	eor	r19, r19
    12e0:	a0 0d       	add	r26, r0
    12e2:	61 1d       	adc	r22, r1
    12e4:	23 1f       	adc	r18, r19
    12e6:	84 9f       	mul	r24, r20
    12e8:	60 0d       	add	r22, r0
    12ea:	21 1d       	adc	r18, r1
    12ec:	82 2f       	mov	r24, r18
    12ee:	76 2f       	mov	r23, r22
    12f0:	6a 2f       	mov	r22, r26
    12f2:	11 24       	eor	r1, r1
    12f4:	9f 57       	subi	r25, 0x7F	; 127
    12f6:	50 40       	sbci	r21, 0x00	; 0
    12f8:	9a f0       	brmi	.+38     	; 0x1320 <__mulsf3_pse+0x88>
    12fa:	f1 f0       	breq	.+60     	; 0x1338 <__mulsf3_pse+0xa0>
    12fc:	88 23       	and	r24, r24
    12fe:	4a f0       	brmi	.+18     	; 0x1312 <__mulsf3_pse+0x7a>
    1300:	ee 0f       	add	r30, r30
    1302:	ff 1f       	adc	r31, r31
    1304:	bb 1f       	adc	r27, r27
    1306:	66 1f       	adc	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	88 1f       	adc	r24, r24
    130c:	91 50       	subi	r25, 0x01	; 1
    130e:	50 40       	sbci	r21, 0x00	; 0
    1310:	a9 f7       	brne	.-22     	; 0x12fc <__mulsf3_pse+0x64>
    1312:	9e 3f       	cpi	r25, 0xFE	; 254
    1314:	51 05       	cpc	r21, r1
    1316:	80 f0       	brcs	.+32     	; 0x1338 <__mulsf3_pse+0xa0>
    1318:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_inf>
    131c:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_szero>
    1320:	5f 3f       	cpi	r21, 0xFF	; 255
    1322:	e4 f3       	brlt	.-8      	; 0x131c <__mulsf3_pse+0x84>
    1324:	98 3e       	cpi	r25, 0xE8	; 232
    1326:	d4 f3       	brlt	.-12     	; 0x131c <__mulsf3_pse+0x84>
    1328:	86 95       	lsr	r24
    132a:	77 95       	ror	r23
    132c:	67 95       	ror	r22
    132e:	b7 95       	ror	r27
    1330:	f7 95       	ror	r31
    1332:	e7 95       	ror	r30
    1334:	9f 5f       	subi	r25, 0xFF	; 255
    1336:	c1 f7       	brne	.-16     	; 0x1328 <__mulsf3_pse+0x90>
    1338:	fe 2b       	or	r31, r30
    133a:	88 0f       	add	r24, r24
    133c:	91 1d       	adc	r25, r1
    133e:	96 95       	lsr	r25
    1340:	87 95       	ror	r24
    1342:	97 f9       	bld	r25, 7
    1344:	08 95       	ret

00001346 <pow>:
    1346:	fa 01       	movw	r30, r20
    1348:	ee 0f       	add	r30, r30
    134a:	ff 1f       	adc	r31, r31
    134c:	30 96       	adiw	r30, 0x00	; 0
    134e:	21 05       	cpc	r18, r1
    1350:	31 05       	cpc	r19, r1
    1352:	a1 f1       	breq	.+104    	; 0x13bc <pow+0x76>
    1354:	61 15       	cp	r22, r1
    1356:	71 05       	cpc	r23, r1
    1358:	61 f4       	brne	.+24     	; 0x1372 <pow+0x2c>
    135a:	80 38       	cpi	r24, 0x80	; 128
    135c:	bf e3       	ldi	r27, 0x3F	; 63
    135e:	9b 07       	cpc	r25, r27
    1360:	49 f1       	breq	.+82     	; 0x13b4 <pow+0x6e>
    1362:	68 94       	set
    1364:	90 38       	cpi	r25, 0x80	; 128
    1366:	81 05       	cpc	r24, r1
    1368:	61 f0       	breq	.+24     	; 0x1382 <pow+0x3c>
    136a:	80 38       	cpi	r24, 0x80	; 128
    136c:	bf ef       	ldi	r27, 0xFF	; 255
    136e:	9b 07       	cpc	r25, r27
    1370:	41 f0       	breq	.+16     	; 0x1382 <pow+0x3c>
    1372:	99 23       	and	r25, r25
    1374:	4a f5       	brpl	.+82     	; 0x13c8 <pow+0x82>
    1376:	ff 3f       	cpi	r31, 0xFF	; 255
    1378:	e1 05       	cpc	r30, r1
    137a:	31 05       	cpc	r19, r1
    137c:	21 05       	cpc	r18, r1
    137e:	19 f1       	breq	.+70     	; 0x13c6 <pow+0x80>
    1380:	e8 94       	clt
    1382:	08 94       	sec
    1384:	e7 95       	ror	r30
    1386:	d9 01       	movw	r26, r18
    1388:	aa 23       	and	r26, r26
    138a:	29 f4       	brne	.+10     	; 0x1396 <pow+0x50>
    138c:	ab 2f       	mov	r26, r27
    138e:	be 2f       	mov	r27, r30
    1390:	f8 5f       	subi	r31, 0xF8	; 248
    1392:	d0 f3       	brcs	.-12     	; 0x1388 <pow+0x42>
    1394:	10 c0       	rjmp	.+32     	; 0x13b6 <pow+0x70>
    1396:	ff 5f       	subi	r31, 0xFF	; 255
    1398:	70 f4       	brcc	.+28     	; 0x13b6 <pow+0x70>
    139a:	a6 95       	lsr	r26
    139c:	e0 f7       	brcc	.-8      	; 0x1396 <pow+0x50>
    139e:	f7 39       	cpi	r31, 0x97	; 151
    13a0:	50 f0       	brcs	.+20     	; 0x13b6 <pow+0x70>
    13a2:	19 f0       	breq	.+6      	; 0x13aa <pow+0x64>
    13a4:	ff 3a       	cpi	r31, 0xAF	; 175
    13a6:	38 f4       	brcc	.+14     	; 0x13b6 <pow+0x70>
    13a8:	9f 77       	andi	r25, 0x7F	; 127
    13aa:	9f 93       	push	r25
    13ac:	0d d0       	rcall	.+26     	; 0x13c8 <pow+0x82>
    13ae:	0f 90       	pop	r0
    13b0:	07 fc       	sbrc	r0, 7
    13b2:	90 58       	subi	r25, 0x80	; 128
    13b4:	08 95       	ret
    13b6:	46 f0       	brts	.+16     	; 0x13c8 <pow+0x82>
    13b8:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_nan>
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	80 e8       	ldi	r24, 0x80	; 128
    13c2:	9f e3       	ldi	r25, 0x3F	; 63
    13c4:	08 95       	ret
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	9f 77       	andi	r25, 0x7F	; 127
    13ca:	5f 93       	push	r21
    13cc:	4f 93       	push	r20
    13ce:	3f 93       	push	r19
    13d0:	2f 93       	push	r18
    13d2:	0e 94 c2 0a 	call	0x1584	; 0x1584 <log>
    13d6:	2f 91       	pop	r18
    13d8:	3f 91       	pop	r19
    13da:	4f 91       	pop	r20
    13dc:	5f 91       	pop	r21
    13de:	0e 94 36 09 	call	0x126c	; 0x126c <__mulsf3>
    13e2:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <exp>

000013e6 <round>:
    13e6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_splitA>
    13ea:	e8 f0       	brcs	.+58     	; 0x1426 <round+0x40>
    13ec:	9e 37       	cpi	r25, 0x7E	; 126
    13ee:	e8 f0       	brcs	.+58     	; 0x142a <round+0x44>
    13f0:	96 39       	cpi	r25, 0x96	; 150
    13f2:	b8 f4       	brcc	.+46     	; 0x1422 <round+0x3c>
    13f4:	9e 38       	cpi	r25, 0x8E	; 142
    13f6:	48 f4       	brcc	.+18     	; 0x140a <round+0x24>
    13f8:	67 2f       	mov	r22, r23
    13fa:	78 2f       	mov	r23, r24
    13fc:	88 27       	eor	r24, r24
    13fe:	98 5f       	subi	r25, 0xF8	; 248
    1400:	f9 cf       	rjmp	.-14     	; 0x13f4 <round+0xe>
    1402:	86 95       	lsr	r24
    1404:	77 95       	ror	r23
    1406:	67 95       	ror	r22
    1408:	93 95       	inc	r25
    140a:	95 39       	cpi	r25, 0x95	; 149
    140c:	d0 f3       	brcs	.-12     	; 0x1402 <round+0x1c>
    140e:	b6 2f       	mov	r27, r22
    1410:	b1 70       	andi	r27, 0x01	; 1
    1412:	6b 0f       	add	r22, r27
    1414:	71 1d       	adc	r23, r1
    1416:	81 1d       	adc	r24, r1
    1418:	20 f4       	brcc	.+8      	; 0x1422 <round+0x3c>
    141a:	87 95       	ror	r24
    141c:	77 95       	ror	r23
    141e:	67 95       	ror	r22
    1420:	93 95       	inc	r25
    1422:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_mintl>
    1426:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__fp_mpack>
    142a:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_szero>
    142e:	29 f4       	brne	.+10     	; 0x143a <round+0x54>
    1430:	16 f0       	brts	.+4      	; 0x1436 <round+0x50>
    1432:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_inf>
    1436:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_zero>
    143a:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_nan>

0000143e <exp>:
    143e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_splitA>
    1442:	a8 f3       	brcs	.-22     	; 0x142e <round+0x48>
    1444:	96 38       	cpi	r25, 0x86	; 134
    1446:	a0 f7       	brcc	.-24     	; 0x1430 <round+0x4a>
    1448:	07 f8       	bld	r0, 7
    144a:	0f 92       	push	r0
    144c:	e8 94       	clt
    144e:	2b e3       	ldi	r18, 0x3B	; 59
    1450:	3a ea       	ldi	r19, 0xAA	; 170
    1452:	48 eb       	ldi	r20, 0xB8	; 184
    1454:	5f e7       	ldi	r21, 0x7F	; 127
    1456:	0e 94 4c 09 	call	0x1298	; 0x1298 <__mulsf3_pse>
    145a:	0f 92       	push	r0
    145c:	0f 92       	push	r0
    145e:	0f 92       	push	r0
    1460:	4d b7       	in	r20, 0x3d	; 61
    1462:	5e b7       	in	r21, 0x3e	; 62
    1464:	0f 92       	push	r0
    1466:	0e 94 0a 0b 	call	0x1614	; 0x1614 <modf>
    146a:	e0 ed       	ldi	r30, 0xD0	; 208
    146c:	f1 e0       	ldi	r31, 0x01	; 1
    146e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fp_powser>
    1472:	4f 91       	pop	r20
    1474:	5f 91       	pop	r21
    1476:	ef 91       	pop	r30
    1478:	ff 91       	pop	r31
    147a:	e5 95       	asr	r30
    147c:	ee 1f       	adc	r30, r30
    147e:	ff 1f       	adc	r31, r31
    1480:	49 f0       	breq	.+18     	; 0x1494 <exp+0x56>
    1482:	fe 57       	subi	r31, 0x7E	; 126
    1484:	e0 68       	ori	r30, 0x80	; 128
    1486:	44 27       	eor	r20, r20
    1488:	ee 0f       	add	r30, r30
    148a:	44 1f       	adc	r20, r20
    148c:	fa 95       	dec	r31
    148e:	e1 f7       	brne	.-8      	; 0x1488 <exp+0x4a>
    1490:	41 95       	neg	r20
    1492:	55 0b       	sbc	r21, r21
    1494:	0e 94 84 0a 	call	0x1508	; 0x1508 <ldexp>
    1498:	0f 90       	pop	r0
    149a:	07 fe       	sbrs	r0, 7
    149c:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <inverse>
    14a0:	08 95       	ret

000014a2 <__fp_powser>:
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	1f 93       	push	r17
    14a8:	0f 93       	push	r16
    14aa:	ff 92       	push	r15
    14ac:	ef 92       	push	r14
    14ae:	df 92       	push	r13
    14b0:	7b 01       	movw	r14, r22
    14b2:	8c 01       	movw	r16, r24
    14b4:	68 94       	set
    14b6:	06 c0       	rjmp	.+12     	; 0x14c4 <__fp_powser+0x22>
    14b8:	da 2e       	mov	r13, r26
    14ba:	ef 01       	movw	r28, r30
    14bc:	0e 94 49 09 	call	0x1292	; 0x1292 <__mulsf3x>
    14c0:	fe 01       	movw	r30, r28
    14c2:	e8 94       	clt
    14c4:	a5 91       	lpm	r26, Z+
    14c6:	25 91       	lpm	r18, Z+
    14c8:	35 91       	lpm	r19, Z+
    14ca:	45 91       	lpm	r20, Z+
    14cc:	55 91       	lpm	r21, Z+
    14ce:	a6 f3       	brts	.-24     	; 0x14b8 <__fp_powser+0x16>
    14d0:	ef 01       	movw	r28, r30
    14d2:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3x>
    14d6:	fe 01       	movw	r30, r28
    14d8:	97 01       	movw	r18, r14
    14da:	a8 01       	movw	r20, r16
    14dc:	da 94       	dec	r13
    14de:	69 f7       	brne	.-38     	; 0x14ba <__fp_powser+0x18>
    14e0:	df 90       	pop	r13
    14e2:	ef 90       	pop	r14
    14e4:	ff 90       	pop	r15
    14e6:	0f 91       	pop	r16
    14e8:	1f 91       	pop	r17
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <inverse>:
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	80 e8       	ldi	r24, 0x80	; 128
    14fa:	9f e3       	ldi	r25, 0x3F	; 63
    14fc:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__divsf3>
    1500:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_inf>
    1504:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__fp_mpack>

00001508 <ldexp>:
    1508:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_splitA>
    150c:	d8 f3       	brcs	.-10     	; 0x1504 <inverse+0x14>
    150e:	99 23       	and	r25, r25
    1510:	c9 f3       	breq	.-14     	; 0x1504 <inverse+0x14>
    1512:	94 0f       	add	r25, r20
    1514:	51 1d       	adc	r21, r1
    1516:	a3 f3       	brvs	.-24     	; 0x1500 <inverse+0x10>
    1518:	91 50       	subi	r25, 0x01	; 1
    151a:	50 40       	sbci	r21, 0x00	; 0
    151c:	94 f0       	brlt	.+36     	; 0x1542 <ldexp+0x3a>
    151e:	59 f0       	breq	.+22     	; 0x1536 <ldexp+0x2e>
    1520:	88 23       	and	r24, r24
    1522:	32 f0       	brmi	.+12     	; 0x1530 <ldexp+0x28>
    1524:	66 0f       	add	r22, r22
    1526:	77 1f       	adc	r23, r23
    1528:	88 1f       	adc	r24, r24
    152a:	91 50       	subi	r25, 0x01	; 1
    152c:	50 40       	sbci	r21, 0x00	; 0
    152e:	c1 f7       	brne	.-16     	; 0x1520 <ldexp+0x18>
    1530:	9e 3f       	cpi	r25, 0xFE	; 254
    1532:	51 05       	cpc	r21, r1
    1534:	2c f7       	brge	.-54     	; 0x1500 <inverse+0x10>
    1536:	88 0f       	add	r24, r24
    1538:	91 1d       	adc	r25, r1
    153a:	96 95       	lsr	r25
    153c:	87 95       	ror	r24
    153e:	97 f9       	bld	r25, 7
    1540:	08 95       	ret
    1542:	5f 3f       	cpi	r21, 0xFF	; 255
    1544:	ac f0       	brlt	.+42     	; 0x1570 <ldexp+0x68>
    1546:	98 3e       	cpi	r25, 0xE8	; 232
    1548:	9c f0       	brlt	.+38     	; 0x1570 <ldexp+0x68>
    154a:	bb 27       	eor	r27, r27
    154c:	86 95       	lsr	r24
    154e:	77 95       	ror	r23
    1550:	67 95       	ror	r22
    1552:	b7 95       	ror	r27
    1554:	08 f4       	brcc	.+2      	; 0x1558 <ldexp+0x50>
    1556:	b1 60       	ori	r27, 0x01	; 1
    1558:	93 95       	inc	r25
    155a:	c1 f7       	brne	.-16     	; 0x154c <ldexp+0x44>
    155c:	bb 0f       	add	r27, r27
    155e:	58 f7       	brcc	.-42     	; 0x1536 <ldexp+0x2e>
    1560:	11 f4       	brne	.+4      	; 0x1566 <ldexp+0x5e>
    1562:	60 ff       	sbrs	r22, 0
    1564:	e8 cf       	rjmp	.-48     	; 0x1536 <ldexp+0x2e>
    1566:	6f 5f       	subi	r22, 0xFF	; 255
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	8f 4f       	sbci	r24, 0xFF	; 255
    156c:	9f 4f       	sbci	r25, 0xFF	; 255
    156e:	e3 cf       	rjmp	.-58     	; 0x1536 <ldexp+0x2e>
    1570:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_szero>
    1574:	16 f0       	brts	.+4      	; 0x157a <ldexp+0x72>
    1576:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__fp_mpack>
    157a:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_nan>
    157e:	68 94       	set
    1580:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_inf>

00001584 <log>:
    1584:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_splitA>
    1588:	a8 f3       	brcs	.-22     	; 0x1574 <ldexp+0x6c>
    158a:	99 23       	and	r25, r25
    158c:	c1 f3       	breq	.-16     	; 0x157e <ldexp+0x76>
    158e:	ae f3       	brts	.-22     	; 0x157a <ldexp+0x72>
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	1f 93       	push	r17
    1596:	0f 93       	push	r16
    1598:	ff 92       	push	r15
    159a:	c9 2f       	mov	r28, r25
    159c:	dd 27       	eor	r29, r29
    159e:	88 23       	and	r24, r24
    15a0:	2a f0       	brmi	.+10     	; 0x15ac <log+0x28>
    15a2:	21 97       	sbiw	r28, 0x01	; 1
    15a4:	66 0f       	add	r22, r22
    15a6:	77 1f       	adc	r23, r23
    15a8:	88 1f       	adc	r24, r24
    15aa:	da f7       	brpl	.-10     	; 0x15a2 <log+0x1e>
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f eb       	ldi	r21, 0xBF	; 191
    15b4:	9f e3       	ldi	r25, 0x3F	; 63
    15b6:	88 39       	cpi	r24, 0x98	; 152
    15b8:	20 f0       	brcs	.+8      	; 0x15c2 <log+0x3e>
    15ba:	80 3e       	cpi	r24, 0xE0	; 224
    15bc:	38 f0       	brcs	.+14     	; 0x15cc <log+0x48>
    15be:	21 96       	adiw	r28, 0x01	; 1
    15c0:	8f 77       	andi	r24, 0x7F	; 127
    15c2:	0e 94 3c 07 	call	0xe78	; 0xe78 <__addsf3>
    15c6:	e8 ef       	ldi	r30, 0xF8	; 248
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <log+0x50>
    15cc:	0e 94 3c 07 	call	0xe78	; 0xe78 <__addsf3>
    15d0:	e5 e2       	ldi	r30, 0x25	; 37
    15d2:	f2 e0       	ldi	r31, 0x02	; 2
    15d4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fp_powser>
    15d8:	8b 01       	movw	r16, r22
    15da:	be 01       	movw	r22, r28
    15dc:	ec 01       	movw	r28, r24
    15de:	fb 2e       	mov	r15, r27
    15e0:	6f 57       	subi	r22, 0x7F	; 127
    15e2:	71 09       	sbc	r23, r1
    15e4:	75 95       	asr	r23
    15e6:	77 1f       	adc	r23, r23
    15e8:	88 0b       	sbc	r24, r24
    15ea:	99 0b       	sbc	r25, r25
    15ec:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__floatsisf>
    15f0:	28 e1       	ldi	r18, 0x18	; 24
    15f2:	32 e7       	ldi	r19, 0x72	; 114
    15f4:	41 e3       	ldi	r20, 0x31	; 49
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 49 09 	call	0x1292	; 0x1292 <__mulsf3x>
    15fc:	af 2d       	mov	r26, r15
    15fe:	98 01       	movw	r18, r16
    1600:	ae 01       	movw	r20, r28
    1602:	ff 90       	pop	r15
    1604:	0f 91       	pop	r16
    1606:	1f 91       	pop	r17
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3x>
    1610:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_round>

00001614 <modf>:
    1614:	fa 01       	movw	r30, r20
    1616:	dc 01       	movw	r26, r24
    1618:	aa 0f       	add	r26, r26
    161a:	bb 1f       	adc	r27, r27
    161c:	9b 01       	movw	r18, r22
    161e:	ac 01       	movw	r20, r24
    1620:	bf 57       	subi	r27, 0x7F	; 127
    1622:	28 f4       	brcc	.+10     	; 0x162e <modf+0x1a>
    1624:	22 27       	eor	r18, r18
    1626:	33 27       	eor	r19, r19
    1628:	44 27       	eor	r20, r20
    162a:	50 78       	andi	r21, 0x80	; 128
    162c:	20 c0       	rjmp	.+64     	; 0x166e <modf+0x5a>
    162e:	b7 51       	subi	r27, 0x17	; 23
    1630:	90 f4       	brcc	.+36     	; 0x1656 <modf+0x42>
    1632:	ab 2f       	mov	r26, r27
    1634:	00 24       	eor	r0, r0
    1636:	46 95       	lsr	r20
    1638:	37 95       	ror	r19
    163a:	27 95       	ror	r18
    163c:	01 1c       	adc	r0, r1
    163e:	a3 95       	inc	r26
    1640:	d2 f3       	brmi	.-12     	; 0x1636 <modf+0x22>
    1642:	00 20       	and	r0, r0
    1644:	71 f0       	breq	.+28     	; 0x1662 <modf+0x4e>
    1646:	22 0f       	add	r18, r18
    1648:	33 1f       	adc	r19, r19
    164a:	44 1f       	adc	r20, r20
    164c:	b3 95       	inc	r27
    164e:	da f3       	brmi	.-10     	; 0x1646 <modf+0x32>
    1650:	0e d0       	rcall	.+28     	; 0x166e <modf+0x5a>
    1652:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__subsf3>
    1656:	61 30       	cpi	r22, 0x01	; 1
    1658:	71 05       	cpc	r23, r1
    165a:	a0 e8       	ldi	r26, 0x80	; 128
    165c:	8a 07       	cpc	r24, r26
    165e:	b9 46       	sbci	r27, 0x69	; 105
    1660:	30 f4       	brcc	.+12     	; 0x166e <modf+0x5a>
    1662:	9b 01       	movw	r18, r22
    1664:	ac 01       	movw	r20, r24
    1666:	66 27       	eor	r22, r22
    1668:	77 27       	eor	r23, r23
    166a:	88 27       	eor	r24, r24
    166c:	90 78       	andi	r25, 0x80	; 128
    166e:	30 96       	adiw	r30, 0x00	; 0
    1670:	21 f0       	breq	.+8      	; 0x167a <modf+0x66>
    1672:	20 83       	st	Z, r18
    1674:	31 83       	std	Z+1, r19	; 0x01
    1676:	42 83       	std	Z+2, r20	; 0x02
    1678:	53 83       	std	Z+3, r21	; 0x03
    167a:	08 95       	ret

0000167c <__udivmodsi4>:
    167c:	a1 e2       	ldi	r26, 0x21	; 33
    167e:	1a 2e       	mov	r1, r26
    1680:	aa 1b       	sub	r26, r26
    1682:	bb 1b       	sub	r27, r27
    1684:	fd 01       	movw	r30, r26
    1686:	0d c0       	rjmp	.+26     	; 0x16a2 <__udivmodsi4_ep>

00001688 <__udivmodsi4_loop>:
    1688:	aa 1f       	adc	r26, r26
    168a:	bb 1f       	adc	r27, r27
    168c:	ee 1f       	adc	r30, r30
    168e:	ff 1f       	adc	r31, r31
    1690:	a2 17       	cp	r26, r18
    1692:	b3 07       	cpc	r27, r19
    1694:	e4 07       	cpc	r30, r20
    1696:	f5 07       	cpc	r31, r21
    1698:	20 f0       	brcs	.+8      	; 0x16a2 <__udivmodsi4_ep>
    169a:	a2 1b       	sub	r26, r18
    169c:	b3 0b       	sbc	r27, r19
    169e:	e4 0b       	sbc	r30, r20
    16a0:	f5 0b       	sbc	r31, r21

000016a2 <__udivmodsi4_ep>:
    16a2:	66 1f       	adc	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	88 1f       	adc	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	1a 94       	dec	r1
    16ac:	69 f7       	brne	.-38     	; 0x1688 <__udivmodsi4_loop>
    16ae:	60 95       	com	r22
    16b0:	70 95       	com	r23
    16b2:	80 95       	com	r24
    16b4:	90 95       	com	r25
    16b6:	9b 01       	movw	r18, r22
    16b8:	ac 01       	movw	r20, r24
    16ba:	bd 01       	movw	r22, r26
    16bc:	cf 01       	movw	r24, r30
    16be:	08 95       	ret

000016c0 <__tablejump2__>:
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	05 90       	lpm	r0, Z+
    16c6:	f4 91       	lpm	r31, Z
    16c8:	e0 2d       	mov	r30, r0
    16ca:	09 94       	ijmp

000016cc <atoi>:
    16cc:	fc 01       	movw	r30, r24
    16ce:	88 27       	eor	r24, r24
    16d0:	99 27       	eor	r25, r25
    16d2:	e8 94       	clt
    16d4:	21 91       	ld	r18, Z+
    16d6:	20 32       	cpi	r18, 0x20	; 32
    16d8:	e9 f3       	breq	.-6      	; 0x16d4 <atoi+0x8>
    16da:	29 30       	cpi	r18, 0x09	; 9
    16dc:	10 f0       	brcs	.+4      	; 0x16e2 <atoi+0x16>
    16de:	2e 30       	cpi	r18, 0x0E	; 14
    16e0:	c8 f3       	brcs	.-14     	; 0x16d4 <atoi+0x8>
    16e2:	2b 32       	cpi	r18, 0x2B	; 43
    16e4:	41 f0       	breq	.+16     	; 0x16f6 <atoi+0x2a>
    16e6:	2d 32       	cpi	r18, 0x2D	; 45
    16e8:	39 f4       	brne	.+14     	; 0x16f8 <atoi+0x2c>
    16ea:	68 94       	set
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <atoi+0x2a>
    16ee:	0e 94 84 0b 	call	0x1708	; 0x1708 <__mulhi_const_10>
    16f2:	82 0f       	add	r24, r18
    16f4:	91 1d       	adc	r25, r1
    16f6:	21 91       	ld	r18, Z+
    16f8:	20 53       	subi	r18, 0x30	; 48
    16fa:	2a 30       	cpi	r18, 0x0A	; 10
    16fc:	c0 f3       	brcs	.-16     	; 0x16ee <atoi+0x22>
    16fe:	1e f4       	brtc	.+6      	; 0x1706 <atoi+0x3a>
    1700:	90 95       	com	r25
    1702:	81 95       	neg	r24
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	08 95       	ret

00001708 <__mulhi_const_10>:
    1708:	7a e0       	ldi	r23, 0x0A	; 10
    170a:	97 9f       	mul	r25, r23
    170c:	90 2d       	mov	r25, r0
    170e:	87 9f       	mul	r24, r23
    1710:	80 2d       	mov	r24, r0
    1712:	91 0d       	add	r25, r1
    1714:	11 24       	eor	r1, r1
    1716:	08 95       	ret

00001718 <_exit>:
    1718:	f8 94       	cli

0000171a <__stop_program>:
    171a:	ff cf       	rjmp	.-2      	; 0x171a <__stop_program>
